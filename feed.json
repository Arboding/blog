{
    "version": "https://jsonfeed.org/version/1",
    "title": "卿词",
    "subtitle": "仰望星空的人，总会比低头赶路的人看得更远",
    "icon": "https://arboding.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://arboding.github.io",
    "items": [
        {
            "id": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E7%AC%AC7%E7%AB%A0/%E6%9F%A5%E6%89%BE/",
            "url": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E7%AC%AC7%E7%AB%A0/%E6%9F%A5%E6%89%BE/",
            "title": "查找",
            "date_published": "2025-01-12T07:51:01.855Z",
            "content_html": "<h2 id=\"查找概论\"><a class=\"anchor\" href=\"#查找概论\">#</a> 查找概论</h2>\n<p>** 查找表：** 查找表是由同一类型的数据元素（或记录）构成的集合。如：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122011330.png\" alt=\"image-20250106083122613\" /></p>\n<p><strong>关键字</strong>是数据元素中某个数据项的值，又称键值，用它可以标志一个数据元素，也可以标志一个记录的某个数据项，我们称为关键码</p>\n<p>若此关键字可以唯一地标志一个记录，则称此关键字为关键字，对于那些可以识别多个数据元素的关键字，我们称为次关键字</p>\n<p>** 查找：** 查找就是根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素、</p>\n<p>查找表<strong>按照操作方式来分</strong>又两大种：静态查找表和动态查找表</p>\n<p>** 静态查找表：** 只作查找操作的查找表。它的主要操作有：</p>\n<ul>\n<li>查询某个 “特定的” 数据元素是否在查找表中</li>\n<li>检索某个 “特定的” 数据元素和各种数据属性</li>\n</ul>\n<p>** 动态查找表：** 在查找过程中同时插入查找表中不存在的数据元素，或者从查找表中删除已经存在的某个数据元素</p>\n<ul>\n<li>查找时插入数据元素</li>\n<li>查找时删除数据元素</li>\n</ul>\n<h2 id=\"顺序表查找\"><a class=\"anchor\" href=\"#顺序表查找\">#</a> 顺序表查找</h2>\n<p>针对线性表进行查找操作，就是静态查找表</p>\n<p><strong>顺序查找</strong>：顺序查找又叫线性表查找，是最基本的查找技术，它的查找过程：从表中第一个（或最后一个）记录开始，逐个进行记录的关键字和给定值比较，若某个记录的关键字和给定值相等，则查找成功，找到所查找的记录；如果直到最后一个记录，其关键字和给定值比较都不等时，则表中没有所查找的记录，查找不成功</p>\n<h3 id=\"顺序查找算法\"><a class=\"anchor\" href=\"#顺序查找算法\">#</a> 顺序查找算法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 顺序查找，a 为数组，n 为要查找的数组个数，key 为要查找的关键字</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Sequential_Search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 元素值从 1 开始</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"优化\"><a class=\"anchor\" href=\"#优化\">#</a> 优化</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 有哨兵顺序查找</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Sequential_Search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 可以解决不需要每次让 i 与 n 作比较，同时也是一个结束条件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    i <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"有序表查找\"><a class=\"anchor\" href=\"#有序表查找\">#</a> 有序表查找</h2>\n<h3 id=\"折半查找\"><a class=\"anchor\" href=\"#折半查找\">#</a> 折半查找</h3>\n<p>** 折半查找技术：** 又称为二分查找。它的前提时线性表中记录必须时关键码有序（通常从小到大），线性表必须采用顺序存储。折半查找的基本思想是：在有序表中，取中间值记录作为比较对象，若给定值与记录的关键字相等，则查找成功；若给定值小于中间记录的关键字，则在中间记录的做半区继续查找；若给定值大于中间记录的关键字，则在中间记录的右半区继续查找。不断重复上述过程，直到查找成功，或所有查找区域无记录，查找失败为止</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 折半查找算法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Binary_Search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">.</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    low <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 定义最低下标为记录首位</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    high <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 定义最高下标为记录末位</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            high <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">></span> a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122011485.png\" alt=\"image-20250106091119228\" /></p>\n<h3 id=\"插值查找\"><a class=\"anchor\" href=\"#插值查找\">#</a> 插值查找</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插值查找</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 折半查找算法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Binary_Search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">.</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    low <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 定义最低下标为记录首位</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    high <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 定义最高下标为记录末位</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        mid <span class=\"token operator\">=</span> low <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">-</span> high<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">-</span> a<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            high <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">></span> a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>插值查找：是根据要查找的关键字 key 与查找表中最大最小记录的关键字比较后的查找方法，其核心在于插值的计算公式<img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122011159.png\" alt=\"image-20250106091528704\" /></p>\n<h3 id=\"斐波那契查找\"><a class=\"anchor\" href=\"#斐波那契查找\">#</a> 斐波那契查找</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Fibonacci_Search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    low <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    high <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> F<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t\t<span class=\"token comment\">// 计算 n 为斐波那契数列的位置</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        k<span class=\"token operator\">++</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> F<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t<span class=\"token comment\">// 将不满的补全</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        mid <span class=\"token operator\">=</span> low <span class=\"token operator\">+</span> F<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            high <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            k <span class=\"token operator\">=</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">></span> a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            k <span class=\"token operator\">=</span> k <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 说明查找到的数时补全数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 斐波那契查找算法的核心在于：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 当key<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span>时，查找成功</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 当key<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span>时，新范围时第low个到第mid<span class=\"token operator\">-</span><span class=\"token number\">1</span>个，此时范围个数为F<span class=\"token punctuation\">[</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>个</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3.</span> 当key<span class=\"token operator\">></span>a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span>时，新范围时第m<span class=\"token operator\">+</span><span class=\"token number\">1</span>个到第high个，此时范围个数为F<span class=\"token punctuation\">[</span>k<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>个</pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122011298.png\" alt=\"image-20250106093217442\" /></p>\n<h2 id=\"线索索引查找\"><a class=\"anchor\" href=\"#线索索引查找\">#</a> 线索索引查找</h2>\n<p><strong>索引</strong>就是把一个关键字与它对对应的记录相关联的过程</p>\n<p>所谓线性索引就是将索引项集合组织为线性结构，也称为索引表</p>\n<h3 id=\"稠密索引\"><a class=\"anchor\" href=\"#稠密索引\">#</a> 稠密索引</h3>\n<h4 id=\"image-20250106093956870\"><a class=\"anchor\" href=\"#image-20250106093956870\">#</a> <img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122011067.png\" alt=\"image-20250106093956870\" /></h4>\n<p>稠密索引是指在线性索引中，将数据集中的每个记录对应一个索引项</p>\n<p>对于稠密索引这个索引表来说，索引项一定时按照关键码有序排列的</p>\n<h3 id=\"分块索引\"><a class=\"anchor\" href=\"#分块索引\">#</a> 分块索引</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122011059.png\" alt=\"image-20250106094157005\" /></p>\n<p>分块有序，是把数据集的记录分成了若干块，并且这些块需要满足以下两个条件：</p>\n<ul>\n<li>块内无序，即每一块内的记录不要求有序，当然，你如果能够让块内有序对查找来说更理想，不过这要付出大量的时间和空间代价</li>\n<li>块间有序</li>\n</ul>\n<p>分块索引的索引项结构分三个数据项：</p>\n<ul>\n<li>最大关键码</li>\n<li>块长</li>\n<li>块首指针</li>\n</ul>\n<p>索引表查找分两步进行：</p>\n<ul>\n<li>在分块索引表中查找要查关键字所在的块</li>\n<li>根据块首指针找到相应的块</li>\n</ul>\n<h3 id=\"倒排索引\"><a class=\"anchor\" href=\"#倒排索引\">#</a> 倒排索引</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122011147.png\" alt=\"image-20250106095214692\" /></p>\n<h2 id=\"二叉排序树\"><a class=\"anchor\" href=\"#二叉排序树\">#</a> 二叉排序树</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122011477.png\" alt=\"image-20250106095637033\" /></p>\n<p>二叉排序树，又称为二叉查找树，它或者是一棵空树，或者是具有以下性质的二叉树：</p>\n<ul>\n<li>若它的左子树不空，则左子树所有结点的值均小于它的根节点的值</li>\n<li>若它的右子树不空，则右子树上的所有结点的值均大于它的根节点的值</li>\n<li>它的左右子树也分别为二叉排序树</li>\n</ul>\n<h3 id=\"二叉排序树的查找操作\"><a class=\"anchor\" href=\"#二叉排序树的查找操作\">#</a> 二叉排序树的查找操作</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 二叉树的二叉链表的结点结构定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiNode</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiNode</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>BiNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>BiTree<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Status <span class=\"token function\">SearchBST</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> BiTree f<span class=\"token punctuation\">,</span> BiTree <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 递归查找二叉排序树 T 中是否存在 key</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>aelse <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">=</span> T <span class=\"token operator\">-></span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> T<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> T <span class=\"token operator\">-></span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">SearchBST</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">-></span> lchild<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">SearchBST</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">-></span> rchild<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122011780.png\" alt=\"image-20250106100807300\" /></p>\n<h3 id=\"二叉排序树的插入操作\"><a class=\"anchor\" href=\"#二叉排序树的插入操作\">#</a> 二叉排序树的插入操作</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Status <span class=\"token function\">InsertBST</span><span class=\"token punctuation\">(</span>BiTree <span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    BiTree p<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">SearchBST</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>BiTree<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        s <span class=\"token operator\">-></span> data <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        s <span class=\"token operator\">-></span> lchild <span class=\"token operator\">=</span> s <span class=\"token operator\">-></span> rchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token operator\">*</span>T <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> p <span class=\"token operator\">-></span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            p <span class=\"token operator\">-></span> lchild <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            p <span class=\"token operator\">-></span> rchild <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>有了二叉树的插入代码，我们要实现二叉排序树的构建就非常容易了</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">62</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">,</span> <span class=\"token number\">58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">47</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">51</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">93</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>BiTree T <span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">InseartBST</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122013164.png\" alt=\"image-20250106101953790\" /></p>\n<h3 id=\"二叉排序树的删除操作\"><a class=\"anchor\" href=\"#二叉排序树的删除操作\">#</a> 二叉排序树的删除操作</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122013405.png\" alt=\"image-20250106102333758\" /></p>\n<p>删除结点三种情况：</p>\n<ul>\n<li>叶子节点</li>\n<li>仅有左或右子树的结点</li>\n<li>左右子树都有结点</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Status <span class=\"token function\">DeleteBST</span><span class=\"token punctuation\">(</span>BiTree <span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 二叉排序树 T 中存在关键字等于 key 的数据元素时，则删除该数据结点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> FASLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">DeleteBST</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> lchild<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">DeleteBST</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> rchild<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Status <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>BiTree <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 从二叉排序树中删除结点 p，并重接它的左或右子树</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    BiTree q<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> rchild <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 右子树为空只需要重接它的左子树（待删结点是叶子也走此分支）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        q <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> lchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> lchild <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 只需要重接它的右子树</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        q <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 左右子树均不空</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        q <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> lchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 转左，然后向右到尽头（找到待删结点的前驱）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            q <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            s <span class=\"token operator\">=</span> s <span class=\"token operator\">-></span> rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> data <span class=\"token operator\">=</span> s <span class=\"token operator\">-></span> data<span class=\"token punctuation\">;</span><span class=\"token comment\">//s 指向被删结点直接前驱（用被删结点前驱的值取代被删结点的值）</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">!=</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            q <span class=\"token operator\">-></span> rchild <span class=\"token operator\">=</span> s <span class=\"token operator\">-></span> lchild<span class=\"token punctuation\">;</span><span class=\"token comment\">// 重接 q 的右子树</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            q <span class=\"token operator\">-></span> lchild <span class=\"token operator\">=</span> s <span class=\"token operator\">-></span> lchild<span class=\"token punctuation\">;</span><span class=\"token comment\">// 重接 q 的左子树</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122011662.png\" alt=\"image-20250106151216136\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122011680.png\" alt=\"image-20250106151232652\" /></p>\n<p><strong>二叉排序树总结</strong></p>\n<p>总之，二叉排序树以链接的方式存储，保持了链接存储结构在执行插入或删除操作时不用移动元素的优点</p>\n<h2 id=\"平衡二叉树\"><a class=\"anchor\" href=\"#平衡二叉树\">#</a> 平衡二叉树</h2>\n<p>** 平衡二叉树：** 是一种二叉排序树，其中每一个结点的左子树和右子树的高度差至多等于 1</p>\n<p>它是一种高度平衡的二叉排序树</p>\n<p>我们将二叉树上结点的左子树高度减去右子树高度的值称为平衡因子 BF，那么平衡二叉树上所有结点的平衡因子只可能是 - 1、0 和 1。只要二叉树上有一个结点的平衡因子的绝对值大于 1，则该二叉树就是不平衡的。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122012599.png\" alt=\"image-20250106152403109\" /></p>\n<p>图二连前提都没有满足，首先应该是二叉排序树</p>\n<p>距离插入结点最近的，且平衡因子的绝对值大于 1 的结点为根的子树，我们称为最小不平衡子树。如：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122012246.png\" alt=\"image-20250106152740784\" /></p>\n<p>插入结点 37 之后，距离它最近的平衡因子绝对值超过 1 的结点是 58，所以从 58 开始以下的子树为最小平衡子树</p>\n<h3 id=\"平衡二叉树的实现原理\"><a class=\"anchor\" href=\"#平衡二叉树的实现原理\">#</a> 平衡二叉树的实现原理</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122012599.png\" alt=\"image-20250106153224359\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122012166.png\" alt=\"image-20250106153236430\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122012598.png\" alt=\"image-20250106153653975\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/img202501122014021.png\" alt=\"image-20250106153705088\" /></p>\n<h3 id=\"平衡二叉树的实现算法\"><a class=\"anchor\" href=\"#平衡二叉树的实现算法\">#</a> 平衡二叉树的实现算法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 二叉树的二叉链表结点结构定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTNode</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> bf<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 结点平衡因子</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTNode</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>BiTNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>BiTree<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 对以 p 为根的二叉树排序树作右旋处理</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 处理之后 p 指向新的树节点，即旋转处理之前的左子树的根节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">R_Rotate</span><span class=\"token punctuation\">(</span>BiTree <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    BiTree L<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    L <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> lchild<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//L 指向 p 的左子树根结点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> lchild <span class=\"token operator\">=</span> L <span class=\"token operator\">-></span> rchild<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//L 的右子树挂接为 p 的左子树</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    L <span class=\"token operator\">-></span> rchild <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> L<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">//p 指向新的根节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机",
                "数据结构",
                "概念",
                "第7章",
                "数据结构"
            ]
        },
        {
            "id": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E7%AC%AC6%E7%AB%A0/%E5%9B%BE/",
            "url": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E7%AC%AC6%E7%AB%A0/%E5%9B%BE/",
            "title": "图",
            "date_published": "2025-01-12T07:51:01.850Z",
            "content_html": "<p>图：图是由顶点的有穷非空集合和顶点之间边的集合组成的，通常表示为 G (V,E), 其中，G 表示一个图，V 时图 G 中顶点的集合，E 时图 G 中边的集合</p>\n<h2 id=\"图的定义与术语\"><a class=\"anchor\" href=\"#图的定义与术语\">#</a> 图的定义与术语</h2>\n<p>1. 图是由顶点集合 (vertex) 及顶点间的关系集合组成的一种数据结构： Graph＝( V, E )</p>\n<p>其中 V = {x | x 属于数据对象} 是顶点的有穷非空集合</p>\n<p>E 是顶点之间关系的有穷集合，包括 <code>E1 = &#123;(x, y) | x, y 属于 V &#125;</code>  边的集合或 <code>E2 = &#123;&lt;x, y&gt; | x, y 属于 V &#125;</code>  弧的集合</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609042.png\" alt=\"image-20250104151115760\" /></p>\n<p>注意：</p>\n<ul>\n<li>在一个图中，所有顶点的度数之和等于边数的 2 倍！</li>\n<li>线性表中我们把数据元素叫元素，树中将数据元素叫结点，在图中数据元素，我们则称为顶点</li>\n<li>线性表中，相邻的数据元素之间具有线性关系，树结构中，相邻两层的结点具有层次关系，而图中，任意两个顶点之间都有可能有关系，顶点之间的逻辑关系用边来表示</li>\n<li>线性表中没有数据元素，称为空表，树中可以没有结点，叫做空树。但是，在图中，不允许没有顶点。在定义中，若 V 时顶点的集合，则强调了顶点集合 V 有穷非空</li>\n</ul>\n<h3 id=\"各种图的定义\"><a class=\"anchor\" href=\"#各种图的定义\">#</a> 各种图的定义</h3>\n<h4 id=\"无向图\"><a class=\"anchor\" href=\"#无向图\">#</a> <strong>无向图</strong></h4>\n<p>无向图的邻接矩阵是对称矩阵</p>\n<p>无向边：若顶点 <code>V1</code>  到 <code>V2</code>  之间的边没有方向，则称这条边为无向边，用无序偶对 <code>(V1, V2)</code>  来表示</p>\n<p (0,1),=\"\" (0,4),=\"\" (0,5),=\"\" (1,2),=\"\" (1,3),=\"\" (1,5),=\"\" (2,3),=\"\" (3,4),=\"\" (3,5),=\"\" (4,5)=\"\">用 (x,y) 表示两个顶点 x,y 之间的一条边 (edge) N={V,E}，V={0,1,2,3,4,5}，E=</p>\n<p><strong>图的顶点与边间的关系</strong></p>\n<p>（1）邻接点：如果 (x,y) 属于 E, 称 x,y 互为邻接点，即 x,y 相邻接</p>\n<p>（2）依附：边 (x,y) 依附于顶点 x,y</p>\n<p>（3）相关联：边 (x,y) 与 x,y 相关联</p>\n<p>（4）顶点的度：和顶点相关联的边的数目，记为 TD (x)</p>\n<p>（5）路径的长度：路径上边的数目</p>\n<p>无向图（完全图）：如果无向图有 n (n-1)/2 条边，则称为无向完全图。</p>\n<h4 id=\"有向图\"><a class=\"anchor\" href=\"#有向图\">#</a> 有向图</h4>\n<p>有向边：若顶点 <code>V1</code>  到 <code>V2</code>  之间的边有方向，则称这条边为有向边，也称为弧。用有序偶对 <code>&lt;V1, V2&gt;</code>  来表示<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609043.png\" alt=\"image-20250104152419736\" /></p>\n<p>连接顶点 A 到 D 的有向边就是弧，A 是弧尾，D 是弧头 <code>&lt;A, D&gt;</code>  表示弧，注意不能写成 <code>&lt;D, A&gt;</code></p>\n<p &lt;0,1，&lt;0,3，&lt;0,4，&lt;1,2，&lt;2,4，&lt;3,2=\"\">用 &lt;x,y&gt; 表示从 x 到 y 的一条弧 (Arc)，且称 x 为弧尾，y 为弧头，N={V,E}，V={0,1,2,3,4}，E=</p>\n<p><strong>图的顶点与边间的关系</strong></p>\n<p>（1）邻接：如果 &lt;x,y&gt; 属于 E, 称 x 邻接到 y, 或 y 邻接</p>\n<p>（2）自 x 相关联：弧 &lt;x,y&gt; 与 x,y 相关联</p>\n<p>（3）入度：以顶点为头的弧的 数目，记为 ID (x)</p>\n<p>（4）出度：以顶点为尾的弧的 数目，记为 OD (x)</p>\n<p>（5）度：TD (x)=ID (x)+OD (x)</p>\n<p>（6）路径的长度：路径上弧的数目</p>\n<p>有向图（完全图）：如果有向图有 n (n-1) 条边，则称为有向完全图。</p>\n<p>在图中，若不存在顶点到自身的边，且同一条边不重复出现，则称这样的图为<strong>简单图</strong></p>\n<p>例如：<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609044.png\" alt=\"image-20250104152918611\" /></p>\n<p>** 稀疏图：** 有很少条边或弧的图称为稀疏图</p>\n<p>** 稠密图：** 有很多条边或弧的图称为稠密图</p>\n<p>** 网：** 带权的图通常称为网<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609045.png\" alt=\"image-20250104153232641\" /></p>\n<p>** 路径：** 是一个从顶点 x 到 y 的顶点序列 <code>(x, vi1, vi2,…, vin, y)</code>  其中， <code>(x,vi1),(vij-1,vij),(vin,y)</code>  皆属于 E。</p>\n<p><strong>回路：</strong></p>\n<p>（1）回路或环：路径的开始顶点与最后一个顶点相同，即路径中 (x, vi1, vi2,…, vin, y)，x=y</p>\n<p>（2）简单路径：路径的顶点序列中，顶点不重复出现</p>\n<p><strong>连通：</strong></p>\n<p>（1）连通：如果顶点 x 到 y 有路径，称 x 和 y 是连通的</p>\n<p>（2）连通图：图中所有顶点都连通</p>\n<p>无向图中的极大联通子图称为连通分量</p>\n<ul>\n<li>要是子图</li>\n<li>子图要是连通的</li>\n<li>连通子图含有极大顶点数</li>\n<li>具有极大顶点数的连通子图包含依附于这些顶点的 所有边</li>\n</ul>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609046.png\" alt=\"image-20250104154444923\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609047.png\" alt=\"image-20250104154642146\" /></p>\n<p><strong>子图：</strong><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609048.png\" alt=\"image-20250104153333371\" /></p>\n<p>设有两个图 G＝(V, E) 和 G’＝(V’, E’)。</p>\n<p>若 V’包含于 V 且 E’包含于 E, 称图 G’是图 G 的子图</p>\n<p><strong>生成树</strong></p>\n<p>一个连通图的生成树是一个极小连通子图，它含图中全部 n 个顶点，但只有足以构成一棵树的 n-1 条边。</p>\n<h3 id=\"图的定义与术语总结\"><a class=\"anchor\" href=\"#图的定义与术语总结\">#</a> 图的定义与术语总结</h3>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609049.png\" alt=\"image-20250104154755964\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609050.png\" alt=\"image-20250104154806563\" /></p>\n<h2 id=\"图的抽象数据类型\"><a class=\"anchor\" href=\"#图的抽象数据类型\">#</a> 图的抽象数据类型</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ADT 图<span class=\"token punctuation\">(</span>Graph<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Data</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    顶点的有穷非空集合和边的集合</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Operation</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">CreatGraph</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>G<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> VR<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>按照顶点集V和边弧集VR的定义构造图G</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">DestoryGraph</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>G<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>图G存在则销毁</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">LocateVex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>若图G存在顶点u，则返回图中的位置</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">GetVex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>返回G中顶点v的值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">PutVex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>将value赋值给v</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">FirstAdjVex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>v<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>返回顶点v的一个邻接顶点，若顶点在G中无邻接顶点返回空</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">NextAjVex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>w<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>返回顶点v相对于顶点w的下一个邻接顶点，若w是v的最后一个邻接点则返回空</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">InsertVex</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>G<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>在图G中增添新顶点v</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">DeleteVex</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>G<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>删除图G中顶点v及其相关的弧</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">InsertArc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>G<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>在图G中增添弧<span class=\"token operator\">&lt;</span>v<span class=\"token punctuation\">,</span> w<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>若G是无向图，还需要增添对称弧<span class=\"token operator\">&lt;</span>w<span class=\"token punctuation\">,</span> v<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">DFSTraverse</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>对图G中进行深度优先遍历，在遍历过程中对每个顶点调用</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">HFSTraverse</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>对图G中进行广度优先遍历，在遍历过程中对每个顶点调用</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>endADT</pre></td></tr></table></figure><h2 id=\"图的存储结构\"><a class=\"anchor\" href=\"#图的存储结构\">#</a> 图的存储结构</h2>\n<p>图的存储结构有 4 种：边集数组，邻接矩阵，邻接表，十字链表（有向），邻接多重表（无向）</p>\n<h3 id=\"边集数组\"><a class=\"anchor\" href=\"#边集数组\">#</a> 边集数组</h3>\n<p>（1）存点集：数组</p>\n<p>（2）存边：边数组，结构体数组</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609051.png\" alt=\"image-20250104200352168\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 无向边</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">edge</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> vx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> vy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Edge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Edge e<span class=\"token punctuation\">[</span><span class=\"token number\">105</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">105</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %d,%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        e<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>vx <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        e<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>vy <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        e<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>w <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 求点 x 的度</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>vx <span class=\"token operator\">==</span> x <span class=\"token operator\">||</span> e<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>vy <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            d<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 有向边</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">edge</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Edge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Edge e<span class=\"token punctuation\">[</span><span class=\"token number\">105</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">105</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %d,%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        e<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>st <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        e<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        e<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>w <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 求点 x 的出度</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>st <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            d<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>优点：思路简单</p>\n<p>缺点：各种操作比较慢，效率不高 --------&gt; 基本不用</p>\n<h3 id=\"邻接矩阵image-20250104165918915\"><a class=\"anchor\" href=\"#邻接矩阵image-20250104165918915\">#</a> 邻接矩阵<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609052.png\" alt=\"image-20250104165918915\" /></h3>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609053.png\" alt=\"image-20250104170127318\" /></p>\n<p>（1）邻接矩阵：记录图中各顶点之间关系的<strong>二维数组</strong>。</p>\n<p>（2）对于不带权的图，以 1 表示两顶点存在边 (或弧)(相邻接)，以 0 表示两顶点不邻接，即 如果 (i,j) 属于 E 或 &lt;i,j &gt; 属于 E，A [ i ] [ j ] =1 否则等于 0。</p>\n<p>（3）无向图的邻接矩阵为对称矩。</p>\n<p>（4）其第 i 行 1 的个数等于顶点 i 的出度 OD (i)，第 j 列 1 的个数等于顶点 j 的入度 ID (j)。</p>\n<p>网络</p>\n<p>在网络中，两个顶点如果不邻接，则被视为距离为无穷大；如果邻接，则两个顶点之间存在一个距离值 (即权值)，即如果 (i,j) 属于 E 或 &lt;i,j &gt; 属于 E，A [ i ] [ j ] =wi,j 否则等于∞。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609054.png\" alt=\"image-20250104170349734\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609055.png\" alt=\"image-20250104170407623\" /></p>\n<p>邻接矩阵的存储结构</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> VertexType<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 顶点类型自定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> EdgeType<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 边上的权值自定义</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXVEX</span> <span class=\"token expression\"><span class=\"token number\">100</span>\t\t\t\t</span><span class=\"token comment\">// 最大定点数自定义</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INFINITY</span> <span class=\"token expression\"><span class=\"token number\">65535</span>\t\t\t</span><span class=\"token comment\">// 用 65535 来代表无穷大</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    VetexType vexs<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 顶点表</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    EdgeType arc<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> numNodes<span class=\"token punctuation\">,</span> numEdges<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 图中当前顶点数和边数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span>MGraph<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 建立无向网图的邻接矩阵表示</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CreateMGraph</span><span class=\"token punctuation\">(</span>MGraph <span class=\"token operator\">*</span>G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入顶点数和边数:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>G <span class=\"token operator\">-></span> numNodes<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>G <span class=\"token operator\">-></span> numEdges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 输入顶点数和边数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G <span class=\"token operator\">-></span> numNodes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t<span class=\"token comment\">// 读入顶点信息，建立顶点表</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> G <span class=\"token operator\">-></span> vexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> G <span class=\"token operator\">-></span> numNodes<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> G <span class=\"token operator\">-></span> numNodes<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 邻接矩阵初始化</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            G <span class=\"token operator\">-></span> arc<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> INFINITY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> G <span class=\"token operator\">-></span> numEdges<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入边(vi，vj)上的下标i,下标j和权w:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %d, %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        G <span class=\"token operator\">-></span> arc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        G <span class=\"token operator\">-></span> arc<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> G <span class=\"token operator\">-></span> arc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 因为无向图，矩阵对称</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"邻接表\"><a class=\"anchor\" href=\"#邻接表\">#</a> 邻接表</h3>\n<p>邻接矩阵是不错的一种图存储结构，但是我们也发现，对于边数相对顶点较少的图，这种结构是存在对存储空间的极大浪费的。比如：<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609056.png\" alt=\"image-20250104172401220\" /></p>\n<p>（1）我们把数组与链表相结合的存储方法称为邻接表</p>\n<p>（2）在邻接表中，每个顶点设置一个单链表，其每个结点都是依附于该顶点的边（或以该顶点为尾的弧）。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609057.png\" alt=\"image-20250104173934710\" /><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609058.png\" alt=\"image-20250104174203632\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609059.png\" alt=\"image-20250104174302608\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609060.png\" alt=\"image-20250104174335073\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> VertexType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> EdgeType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">EdgeNode</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> adjvex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    EdgeType info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">EdgeNode</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span>EdgeNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">VertexNode</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    VertexType data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    EdgeNode <span class=\"token operator\">*</span>firstedge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span>VertexNode<span class=\"token punctuation\">,</span> AdjList<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    AdjList adjList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> numNodes<span class=\"token punctuation\">,</span> numEdges<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span>GraphAdjList<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 建立图的邻接表结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CreateALDraph</span><span class=\"token punctuation\">(</span>GraphAdjList <span class=\"token operator\">*</span>G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    EdgeNode <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入顶点数和边数：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>G <span class=\"token operator\">-></span> numNodes<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>G <span class=\"token operator\">-></span> numEdges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输入顶点数和边数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G <span class=\"token operator\">-></span> numNodes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 读入顶点信息，建立顶点表</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> G <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 输入顶点信息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        G <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstedge <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将边表置为空表</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> G <span class=\"token operator\">-></span> numEdges<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 建立边表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入边(vi, vj)上的顶点序号：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 输入边表 (vi,vj) 上的顶点序号</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>EdgeNode <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>EdgeNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 向内存申请空间，生成边表结点</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        e <span class=\"token operator\">-></span> adjvex <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 邻接序号为 i</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        e <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> G <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstedge<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将 e 的指针指向当前顶点指向的结点</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        G <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstedge <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将当前的指针指向 e</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>EdgeNode <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>EdfeNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 向内存申请空间，生成边表结点</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        e <span class=\"token operator\">-></span> adjvex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 邻接序号为 i</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        e <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> G <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstedge<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将 e 的指针指向当前顶点指向的结点</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        G <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstedge <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将当前的顶点指针指向 e</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在一个无向图的邻接表表示中，每个顶点对应一个链表，链表中包含该顶点相邻的其他顶点。每条边在邻接表中对应两个链表结点，因为无向图的边是双向的。给定图包含 10 个顶点和 20 条边，那么每个顶点的平均度数是 2× 边数 / 顶点数 = 4。</p>\n<p>由于每个链表结点对应一条边，总的链表结点数是 2× 边数。所以，邻接表包含 2×20=40 个链表结点。</p>\n<p>注意：n 个结点，e 条边的无向图邻接表中，有 n 个头结点和 <code>2e</code>  个表结点</p>\n<p>（1）在有向图的邻接表中不易找到指向该顶点的弧。</p>\n<p>（2）对于有向图的邻接表，其第 i 个链表中结点的个数只是该顶点的出度；如果要计算入度，必须遍历整个邻接表 [也可以建立一个逆邻接表] 要判定两个顶点 i 和 j 是否有边（或弧），必须搜索整个第 i 个和第 j 个链表，不及邻接矩阵方便。</p>\n<p>在有向图的逆邻接表找每个结点入度：</p>\n<p>（3）无向邻接表所需存储空间 O (|V|+2|E|)，有向邻接表所需存储空间 O (|V|+|E|)</p>\n<p>（4）对于稀疏图，采用邻接表能极大节省空间。</p>\n<h3 id=\"十字链表\"><a class=\"anchor\" href=\"#十字链表\">#</a> 十字链表</h3>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609061.png\" alt=\"image-20250104192037777\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609062.png\" alt=\"image-20250104192133453\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609063.png\" alt=\"image-20250104192314116\" /></p>\n<p>虚线的含义：就是此图逆邻接表的表示</p>\n<p>（1）十字链表是有向图的另一种存储结构</p>\n<p>（2）十字链表是将有向图的邻接表和逆邻接表结合起来的一种存储结构</p>\n<h3 id=\"邻接多重表\"><a class=\"anchor\" href=\"#邻接多重表\">#</a> 邻接多重表</h3>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609064.png\" alt=\"image-20250104193308137\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609065.png\" alt=\"image-20250104193707238\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609066.png\" alt=\"image-20250104193359984\" /></p>\n<p>（1）邻接多重表是无向图的另一种存储结构</p>\n<p>（2）在无向图中，一条边要用 2 个结点表示 (分别从 2 个顶点的角度看)</p>\n<p>（3）在邻接多重表中，一条边只用一个结点表示</p>\n<p>（4）将所有具有某顶点的结点，全部用链连结起来，链所在的域为该顶点对应的指针域</p>\n<h2 id=\"图的遍历\"><a class=\"anchor\" href=\"#图的遍历\">#</a> 图的遍历</h2>\n<p>** 图的遍历：** 从图中某一顶点出发访遍图中其余顶点，且使每个顶点仅被访问一次，这一过程就叫做图的遍历</p>\n<p>1. 从图的某一顶点开始，访遍图中其余顶点，且使每一个顶点仅被访问一次</p>\n<p>2. 图的遍历主要应用于无向图</p>\n<h3 id=\"深度优先搜索dfs\"><a class=\"anchor\" href=\"#深度优先搜索dfs\">#</a> 深度优先搜索 <code>DFS</code></h3>\n<p>它从图中某个顶点 v 出发，访问此顶点，然后从 v 的未被访问的邻接点出发深度优先遍历图，直至图中所有和 v 有关的路径相通的顶点都被访问到</p>\n<p>（1）图的深度优先搜索是树的先根遍历的推广</p>\n<p>（2）图中可能存在回路，且图的任一顶点都可能与其它顶点相通，在访问完某个顶点之后可能会沿着某些边又回到了曾经访问过的顶点。</p>\n<p>（3）为了避免重复访问，可设置一个标志顶点是否被访问过的辅助数组 visited [ ]</p>\n<p>（4）算法：</p>\n<p>​\t所有顶点访问标志 visited [] 设置为 FALSE</p>\n<p>​\t从某顶点 v0 开始，设 v=v0</p>\n<p>​\t--1. 如果 visited [v]=FALSE，则访问该顶点，且设 visited [v]=TRUE</p>\n<p>​\t--2. 如果找到当前顶点的一个新的相邻顶点 w, 设 v=w, 重复 1</p>\n<p>​\t--3. 否则 (说明当前顶点的所有相邻顶点都已被访问过，或者当前顶点没有相邻顶点)，如果当前顶点是 v0，退出；否则返回上一级顶点，重复 2</p>\n<p>（5）存储结构未定，则遍历顺序不确定。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 如果我们用的是邻接矩阵的方式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXVEX</span> <span class=\"token expression\"><span class=\"token number\">9</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Bool visited<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 访问标志的数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 邻接矩阵的深度优先搜索递归算法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">DFS</span><span class=\"token punctuation\">(</span>MGraph G<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c \"</span><span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">.</span>vexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 打印顶点，也可以是其他操作</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">.</span>arc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token function\">DFS</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 邻接矩阵的深度遍历操作</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">DFSTraverse</span><span class=\"token punctuation\">(</span>MGraph G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 初始化所有顶点状态都是未访问过状态</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// 对访问过的顶点调用 DFS，若为连通图仅执行一次</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token function\">DFS</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 邻接表的深度优先搜索</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">DFS</span><span class=\"token punctuation\">(</span>GraphAdjList GL<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    EdgeNode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> GL <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 打印顶点，也可以做其他操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    p <span class=\"token operator\">=</span> GL <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstedge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>p <span class=\"token operator\">-></span> adjvex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">DFS</span><span class=\"token punctuation\">(</span>GL<span class=\"token punctuation\">,</span> P <span class=\"token operator\">-></span> adjvex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 对未访问的邻接顶点递归调用</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        p <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 邻接表的深度遍历操作</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">DFSTraverse</span><span class=\"token punctuation\">(</span>GraphAdjList GL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> GL <span class=\"token operator\">-></span> numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 初始所有顶点状态都是未访问过状态</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> GL <span class=\"token operator\">-></span> numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// 对未访问过的顶点调用 DFS，若是连通图，只会执行一次</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">DFS</span><span class=\"token punctuation\">(</span>GL<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"广度优先搜索bfs\"><a class=\"anchor\" href=\"#广度优先搜索bfs\">#</a> 广度优先搜索 <code>（BFS）</code></h3>\n<p>广度优先遍历<strong>类似于树的层次遍历</strong></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609067.png\" alt=\"image-20250104213206013\" /></p>\n<p>（1）广度优先搜索 <code>(BFS)</code>  是一种分层搜索方法</p>\n<p>（2） <code>BFS</code>  每向前走一步可能访问一批顶点，不存在往回退的情况</p>\n<p>（3） <code>BFS</code>  不是一个递归的过程。</p>\n<p>（4）算法：</p>\n<p>​\t所有顶点访问标志 visited [] 设置为 FALSE</p>\n<p>​\t从某顶点 v0 开始，访问 v0，visited [v0]=TRUE，将 v0 插入队列 Q</p>\n<p>​\t--1. 如果队列 Q 不空，则从队列 Q 头上取出一个顶点 v, 否则结束</p>\n<p>​\t--2. 依次找到顶点 v 的所有相邻顶点 v’，如果 visited [v’]=FALSE，访问该顶点 v’，visited [v’]=TRUE，将 v’插入队列 Q</p>\n<p>​\t--3. 重复 1,2</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 邻接矩阵的广度遍历算法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">BFSTraverse</span><span class=\"token punctuation\">(</span>MGraph G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Queue Q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fasle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">InitQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 初始化一辅助用的队列</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 对每一个顶点做循环</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t<span class=\"token comment\">// 若是未访问过就处理</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 设置当前顶点访问过</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">.</span>vexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 打印顶点，也可以做其他操作</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 将此顶点入队列</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">QueueEmpty</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 若当前队列不为空</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token function\">DeQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 将队首元素出列，赋值给 i</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 判断其他顶点，若与当前顶点存在边且未访问过</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">.</span>arc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        visited<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 将找到的此顶点标记未已访问</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c \"</span><span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">.</span>vexs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 打印顶点</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        <span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 将找到的此顶点入队列</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 邻接表的广度遍历算法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">BFSTraverse</span><span class=\"token punctuation\">(</span>GMraphAdjList GL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    EdgeNode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Queue Q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> GL <span class=\"token operator\">-></span> numVerrexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c \"</span><span class=\"token punctuation\">,</span> GL <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">QueueEmpty</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token function\">DeQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                p <span class=\"token operator\">=</span> GL <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstedge<span class=\"token punctuation\">;</span><span class=\"token comment\">// 找到当前顶点的边表，链的表头指针</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>p <span class=\"token operator\">-></span> adjvex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 若此顶点未被访问</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        visited<span class=\"token punctuation\">[</span>p <span class=\"token operator\">-></span> adjvex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c \"</span><span class=\"token punctuation\">,</span> GL <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>p <span class=\"token operator\">-></span> adjvex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">,</span> p <span class=\"token operator\">-></span> adjvex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将此顶点入队列</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    p <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 指针指向下一个邻接点</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>结论</strong></p>\n<p>（1）如果图为连通图，则从该图的任意一个顶点开始执行一次深度优先遍历或广度优先遍历，即可访问该连通图的所有顶点。</p>\n<p>（2）如果图为非连通图，则依次从未访问过的顶点开始执行深度优先遍历或广度优先遍历，直至所有的顶点均被访问。</p>\n<p>（3）事实上执行一次深度优先可以遍历一个连通分支。图有多少个连通分支，就调用多少次深度优先遍历。</p>\n<p><strong>时间复杂度</strong></p>\n<p>（1）可以看出无论是深度优先遍历还是广度优先遍历，其实质都是透过边或弧找邻接点的过程，只是访问的顺序不同。</p>\n<p>（2）两者的时间复杂度相同，取决于采取的存储结构，若用邻接矩阵为 O (N^2), 若 用邻接表则为 O (N+E) 即 O (n)。</p>\n<p>注意：深度优先搜索遍历类似于树的先根遍历，广度优先搜索遍历类似于树的层次遍历。</p>\n<h2 id=\"图的连通性问题\"><a class=\"anchor\" href=\"#图的连通性问题\">#</a> 图的连通性问题</h2>\n<h3 id=\"1无向图的连通性\"><a class=\"anchor\" href=\"#1无向图的连通性\">#</a> 1. 无向图的连通性</h3>\n<p>如果无向图中，存在不连通的顶点，则该图称为非连通图。</p>\n<h3 id=\"2无向图的连通分量\"><a class=\"anchor\" href=\"#2无向图的连通分量\">#</a> 2. 无向图的连通分量</h3>\n<p>（1）非连通图的极大连通子图叫做连通分量。</p>\n<p>（2）若从无向图的每一个连通分量中的一个顶点出发进行 <code>DFS</code>  或 <code>BFS</code>  遍历，可求得无向图的所有连通分量的生成树 <code>(DFS或BFS生成树)</code> 。</p>\n<p>（3）所有连通分量的生成树组成了非连通图的生成森林。</p>\n<p>（4）连通分量是无向图的极大连通子图，其中极大的含义是将依附于连通分量中顶点的所有边都加上，所以连通分量中可能存在回路。</p>\n<p>（5）生成树是一个连通图的极小连通子图，包含连通图的所有顶点，且使其连通的边数最少。</p>\n<p>（6）极大连通子图是无向图（不一定连通）的连通分量。极小连通子图是连通无向图的生成树。</p>\n<p>（7）任何连通图的连通分量只有一个，即使其自身。</p>\n<h3 id=\"3无向图的生成树\"><a class=\"anchor\" href=\"#3无向图的生成树\">#</a> 3. 无向图的生成树</h3>\n<p>（1）由 <code>DFS</code>  遍历，求得连通分量称为 <code>DFS</code>  生成树</p>\n<p>（2）由 <code>BFS</code>  遍历，求得连通分量称为 <code>BFS</code>  生成树</p>\n<h3 id=\"4有向图的强连通分量\"><a class=\"anchor\" href=\"#4有向图的强连通分量\">#</a> 4. 有向图的强连通分量</h3>\n<p>强连通图是指在有向图中，对于每一对不同的顶点 u 和 v，都存在从 u 到 v 及 v 到 u 的路径，n 个顶点用弧向同一方向连接形成一个环时，就是强连通图，需要弧最少。</p>\n<p>（1）深度优先搜索算法是求有向图的强连通分量的有效方法。</p>\n<p>（2）在有向图 G 上，从某个顶点出发沿该顶点为尾的弧进行深度优先搜索，并按其所有邻接点的搜索都完成（即退出 dfs 函数）的顺序将顶点排列起来。</p>\n<p>（3） 在有向图 G 上，从最后搜索的顶点出发，沿着以该顶点为头的弧作逆向的深度优先搜索遍历。若此次遍历不能访问到有向图中的所有顶点，则从余下顶点中最后完成搜索的顶点出发继续进行逆向的深度优先搜索遍历。</p>\n<p>（4）每次调用 dfs 作逆向深度优先遍历所访问到的顶点集便是有向图 G 中的一个强连通分量的顶点集。</p>\n<p>（5）为了实现以上遍历，需要对深度优先遍历算法作以下修改</p>\n<p>​\t--1. 在进入 <code>DFStraverse</code>  函数时，对计数变量 count 进行初始化，count=0</p>\n<p>​\t--2. 在退出 <code>DFS</code>  函数之前，将完成搜索的顶点号记录在另一个辅助数组 finish【 <code>vernum</code> 】中，在 <code>DFS</code>  函数结束之前加上 <code>finished【++count】=v</code></p>\n<h2 id=\"最小生成树\"><a class=\"anchor\" href=\"#最小生成树\">#</a> 最小生成树</h2>\n<p>（1）如果无向图中，边上有权值，则称该无向图为无向网</p>\n<p>（2）如果无向网中的每个顶点都相通，称为连通网</p>\n<p>（3）最小生成树 <code>(Minimum Cost Spanning Tree)</code>  是代价最小的连通网的生成树，即该生成树上的边的权值和最小</p>\n<p>（4）准则：必须使用且仅使用连通网中的 n-1 条边来联结网络中的 n 个顶点；不能使用产生回路的边；各边上的权值的总和达到最小。常用于道路建设、线路铺设等应用中计算成本。</p>\n<h3 id=\"1prim普里姆算法生成最小生成树\"><a class=\"anchor\" href=\"#1prim普里姆算法生成最小生成树\">#</a> 1. <code>Prim</code>  普里姆算法生成最小生成树</h3>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609068.png\" alt=\"image-20250105144112812\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Prim 算法生成最小生成树</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MinSpanTree_Prim</span><span class=\"token punctuation\">(</span>MGraph G<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> adjvex<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 保留相关顶点间边的权值点下标</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> lowcost<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 保存相关顶点间边的权值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    lowcost<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 初始化第一个权值为 0，即 v0 加入生成树</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    adjvex<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 初始化第一个顶点下标为 0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 循环除下标为 0 外的全部顶点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        lowcost<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> G<span class=\"token punctuation\">.</span>arc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将 v0 顶点与之有边的权值存入数组</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        adjvex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 初始化都为 v0 的下标</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVerexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        min <span class=\"token operator\">=</span> INFINITY<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 初始化最小权值为无穷大</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 循环全部顶点</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lowcost<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> lowcost<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                min <span class=\"token operator\">=</span> lowcost<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 如果权值不为 0 且权值小于 min，则让当前权值成为最小值</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                k <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 将当前最小值的下标存入 k</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(%d, %d)\\n\"</span><span class=\"token punctuation\">,</span> adjvex<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 打印当前顶点边中权值最小的边</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        lowcost<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 将当前顶点权值设置为 0，此顶点已完成任务</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 循环所有顶点</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lowcost<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> G<span class=\"token punctuation\">.</span>arc<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> lowcost<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 如果下标为 k 的顶点的个边权值小于此前这些顶点未被加入生成树的权值</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                lowcost<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> G<span class=\"token punctuation\">.</span>arc<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将较小的权值存入 lowcost 相应位置</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                adjvex<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 将下标为 k 的顶点存入 adjvex</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609069.png\" alt=\"image-20250105143918335\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609070.png\" alt=\"image-20250105143955390\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609071.png\" alt=\"image-20250105144720199\" /></p>\n<h3 id=\"2kruscal克鲁斯卡尔算法生成最小生成树\"><a class=\"anchor\" href=\"#2kruscal克鲁斯卡尔算法生成最小生成树\">#</a> 2. <code>Kruscal</code>  克鲁斯卡尔算法生成最小生成树</h3>\n<p>直接以边为目标去构建，只不过构建时要考虑是否会形成环路而已。此时，我们就用到了图的存储结构中的边集数组</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> begin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Edge<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609072.png\" alt=\"image-20250105150044499\" /></p>\n<p>先把权值最小的边挑出来</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609073.png\" alt=\"image-20250105150149207\" /></p>\n<p>但是呢，我们一定要确保不能生成环哦，这也是 Kruskal 算法的核心所在</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Kruskal 算法生成最小生成树</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MiniSpanTree_Kruskal</span><span class=\"token punctuation\">(</span>MGraph G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Edge edge<span class=\"token punctuation\">[</span>MAXEDGE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 定义边集数组，edge 的结构为 begin,end,weight, 均为整型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 定义一维数组用来判断边与边是否形成环路</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 此处省略将邻接矩阵 G 转化为边集数组 edges 并按权由小到大排序的代码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 初始化数组为 0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numEdges<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 循环每一条边</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        n <span class=\"token operator\">=</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        m <span class=\"token operator\">=</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 假如 n 与 m 不等，说明此边没有与现有的生成树形成环路</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            parent<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将此边结尾顶点放入下标为起点的 parent 中，表示此顶点已经在生成树集合中</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(%d, %d) %d\\n\"</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>begin<span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 查找连线顶点的尾部下标</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        f <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609074.png\" alt=\"image-20250105152250490\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609075.png\" alt=\"image-20250105152308686\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609076.png\" alt=\"image-20250105152327907\" /></p>\n<p>生成最小生成树：</p>\n<p>当为稠密图（邻接矩阵）prim 算法 O (n^2)</p>\n<p>当为稀疏图（邻接表）Kruscal 算法 O (eloge)</p>\n<h2 id=\"最短路径\"><a class=\"anchor\" href=\"#最短路径\">#</a> 最短路径</h2>\n<p>1. 最短路径</p>\n<p>（1）最短路径是求从图（或网）中某一顶点，到其余各顶点的最短路径</p>\n<p>（2）最短路径与最小生成树主要有三点不同：</p>\n<p>​\t--1. 最短路径的操作对象主要是有向图 (网)，而最小生成树的操作对象是无向图</p>\n<p>​\t--2. 最短路径有一个始点，最小生成树没有（Prim 算法有起点）</p>\n<p>​\t--3. 最短路径关心的是始点到每个顶点的路径最短，而最小生成树关心的是整个树的代价最小</p>\n<p>2. 基本概念</p>\n<p>（1）路径长度：一条路径上所经过的边的数目</p>\n<p>（2）带权路径长度：路径上所经过边的权值之和</p>\n<p>（跟树的带权路径长度区分好！）</p>\n<p>（3）最短路径：(带权) 路径长度 (值) 最小的那条路径</p>\n<p>（4）最短路径长度或最短距离：最短路径长度</p>\n<h3 id=\"1dijkstra迪杰斯特拉算法on3\"><a class=\"anchor\" href=\"#1dijkstra迪杰斯特拉算法on3\">#</a> 1. <code>Dijkstra</code>  迪杰斯特拉算法 (O (n^3))</h3>\n<p>（1）Dijkstra 算法思想：采用按路径长度递增的次序产生最短路径</p>\n<p>​\t--1. 设置两个顶点的集合 U 和 T，集合 U 中存放已找到最短路径的顶点，集合 T 中存放当前还未找到最短路径的顶点。</p>\n<p>​\t--2. 初始状态时，集合 U 中只包含源点，设为 v0；</p>\n<p>​\t--3. 然后从集合 T 中选择到源点 v0 路径长度最短的顶点 u 加入到集合 U 中；</p>\n<p>​\t--4. 集合 U 中每加入一个新的顶点 u 都要修改源点 v0 到集合 T 中剩余顶点的当前最短路径长度值，集合 T 中各顶点的新的当前最短路径长度值，为原来的当前最短路径长度值与从源点过顶点 u 到达该顶点的路径长度中的较小者。</p>\n<p>​\t--5. 转到 3，此过程不断重复，直到集合 T 中的顶点全部加入到集合 U 中为止。</p>\n<p>（2）在 Dijkstra 算法中，引进了一个辅助向量 D</p>\n<p>每个分量 D [i] 表示当前所找到的从始点到每个终点 vi 的最短路径长度。</p>\n<p>D [i] 初值为始点 v0 到各终点 vi 的直接距离，即若从始点到某终点有 (出) 弧，则为弧上的权值，否则为∞。</p>\n<p>（3）得到路径：</p>\n<p>​\t--1. 设置另一个辅助向量 path []，用来存放得到的从源点 v0 到其余各顶点的最短路径上到达目标顶点的前一顶点下标。</p>\n<p>​\t--2. 为每一个顶点 i 设置辅助向量 pathi，用来存放得到的从源点 v0 到该顶点的最短路径中依次访问过的顶点。第一个值是路径上的顶点数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXEDGE</span> <span class=\"token expression\"><span class=\"token number\">20</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXVEX</span> <span class=\"token expression\"><span class=\"token number\">20</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INFINITY</span> <span class=\"token expression\"><span class=\"token number\">65535</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> vexs<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> arc<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> numVertexes<span class=\"token punctuation\">,</span> numEdges<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span>MGraph<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> Patharc<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 用于存储最短路径下标的数组</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> ShortPathTable<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 用于存储到各点最短路径的权值和</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Dijkstra 算法，求有向网络 G 的 v0 顶点到其余顶点 v 的最短路径 P [v] 及带权长度 D [v]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//P [v] 的值为前驱顶点下标，D [v] 表示 v0 到 v 的最短路径长度和</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ShortestPath_Dijkstra</span><span class=\"token punctuation\">(</span>MGraph G<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v0<span class=\"token punctuation\">,</span> Patharc <span class=\"token operator\">*</span>P<span class=\"token punctuation\">,</span> ShortPathTable <span class=\"token operator\">*</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//final [w]=1 表示求得顶点 v0 到 vw 的最短路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 初始化数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">final</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 全部顶点初始化为未知最短路径状态</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> G<span class=\"token punctuation\">.</span>arc<span class=\"token punctuation\">[</span>v0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将与 v0 点有连线的顶点加上权值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 初始化路径数组 P 为 - 1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>v0<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//v0 至 v0 的路径为 0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">final</span><span class=\"token punctuation\">[</span>v0<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//v0 至 v0 不需要求路径</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 开始主循环，每次求得 v0 到某个顶点 v 的最短路径</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        min <span class=\"token operator\">=</span> INFINITY<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 当前所知离 v0 顶点的最近距离</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> w <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 寻找离 v0 最近的顶点</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                k <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                min <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//w 顶点离 v0 顶点更近</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">final</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 将目前找到的最近的顶点置为 1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> w <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 修正当前最短路径及距离</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>min <span class=\"token operator\">+</span> G<span class=\"token punctuation\">.</span>arc<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 如果经过 v 顶点的路径比现在这条路径的长度短的话，说明找到了更短的路径，修改 D [w] 和 P [w]，修改当前路径长度</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> min <span class=\"token operator\">+</span> G<span class=\"token punctuation\">.</span>arc<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调用此函数前，我们需要准备邻接矩阵 <code>MGraph</code>  的 <code>G</code>  如下</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609077.png\" alt=\"image-20250105161111000\" /></p>\n<h3 id=\"2floyd弗洛伊德算法\"><a class=\"anchor\" href=\"#2floyd弗洛伊德算法\">#</a> 2. <code>Floyd</code>  弗洛伊德算法</h3>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609078.png\" alt=\"image-20250105170738216\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> Patharc<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> ShortPathTable<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 弗洛伊德算法，求网图中各顶点到其余顶点的最短路径 P [v][w] 及带权长度 D [v][w]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ShortestPath_Floyd</span><span class=\"token punctuation\">(</span>MGraph G<span class=\"token punctuation\">,</span> Patharc <span class=\"token operator\">*</span>P<span class=\"token punctuation\">,</span> ShortPathTable <span class=\"token operator\">*</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 初始化 D 与 P</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> w <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> G<span class=\"token punctuation\">.</span>arc<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//D [v][w] 值即为对应点间的权值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 初始化 P</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token generic-function\"><span class=\"token function\">w</span> <span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span></span></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token comment\">// 如果经过下标为 k 顶点的路径比原来两点间路径更短</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将当前两点间权值设更小一个</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 路径设置为经过下标为 k 的顶点</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"各顶点间最短路径如下：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">=</span> v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> w <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v%d-v%d weigh: %d\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> D<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        k <span class=\"token operator\">=</span> P<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 获得第一个路径顶点下标</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" path: %d\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印源点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">!=</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t<span class=\"token comment\">// 如果路径顶点下标不是终点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" -> %d\"</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 打印路径顶点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            k <span class=\"token operator\">=</span> P<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 获得下一个路径顶点下标</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" -> %d\\n\"</span><span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 打印终点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果你面临需要求所有顶点的最短路径问题，弗洛伊德算法应该是不错的选择</p>\n<h2 id=\"拓扑排序\"><a class=\"anchor\" href=\"#拓扑排序\">#</a> 拓扑排序</h2>\n<p><code>AOV网</code> ：在一个表示工程的有向图中，用顶点表示活动，用弧表示活动之间的优先关系，这样的有向图为顶点表示活动的网，我们称为 <code>AOV网</code></p>\n<p>1. <code>AOV网</code> （有向图！）</p>\n<p>（1）如果用有向图的顶点表示活动，用弧表示活动间的优先关系，则称该有向图为顶点表示活动的网 <code>AOV(Activity On Vertex Network)</code></p>\n<p>（2） <code>AOV</code>  的应用包括流程图、工程安排等。对 <code>AOV网</code> ，应判定图中不存在环，因为存在环意味着某项活动应以自己为先决条件。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609079.png\" alt=\"image-20250105192745031\" /></p>\n<p>​\t拓扑排序，其实就是对一个有向图构造拓扑序列的过程</p>\n<p>​\t如果此网的全部顶点都被输出，则说明它是不存在环（回路）的 <code>AOV网</code> ；</p>\n<p>​\t如果输出的顶点数少了，哪怕少了一个，也说明这个网存在环（回路），不是 <code>AOV网</code></p>\n<h3 id=\"拓扑排序算法\"><a class=\"anchor\" href=\"#拓扑排序算法\">#</a> 拓扑排序算法</h3>\n<p>对 <code>AOV网</code> 进行拓扑排序的基本思路：从 <code>AOV网</code> 中选择一个入度为 0 的顶点输出，然后删去此顶点，并删除以此顶点为尾的弧，继续重复此步骤，直到输出全部顶点或者 AOV 网中不存在入度为 0 的顶点为止</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609080.png\" alt=\"image-20250105193626443\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609081.png\" alt=\"image-20250105193645000\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">EdgeNode</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 边表结点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> adjvex<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 邻接点域，存储该顶点对应的下标</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 用于存储权值，对于非网图可以不需要</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">EdgeNode</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 链域，指向下一个邻接点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>EdgeNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">VertexNode</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 顶点表结点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> in<span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 顶点入度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 顶点域，存储顶点信息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    EdgeNode <span class=\"token operator\">*</span>firstedge<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 边表头结点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span>VertexNode<span class=\"token punctuation\">,</span> AdjList<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    AdjLixt adjList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> numVertexes<span class=\"token punctuation\">,</span> numEdges<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 图中当前结点数和边数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span>graphAdjList<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>GraphAdList<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 拓扑排序，若 GL 无回路，则输出拓扑排序序列并返回 1，否则返回 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Status <span class=\"token function\">TopologicalSort</span><span class=\"token punctuation\">(</span>GraphAdjList GL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    EdgeNode <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> gettop<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 用于栈指针下标</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 用于统计输出顶点的个数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 建栈将入度为 0 的顶点入栈</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>GL <span class=\"token operator\">-></span> numVertexes <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> GL <span class=\"token operator\">-></span> numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GL <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>in <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// 将入度为 0 的顶点入栈</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            stack<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        gettop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 出栈</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d -> \"</span><span class=\"token punctuation\">,</span> GL <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>gettop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 打印此顶点</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 统计输出顶点数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> GL <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>gettop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstedge<span class=\"token punctuation\">;</span> e<span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> e <span class=\"token operator\">-></span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 对此顶点弧表遍历</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            k <span class=\"token operator\">=</span> e <span class=\"token operator\">-></span> adjvex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>GL <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 将 k 号顶点邻接点的入度减 1，若为 0 则入栈，以便下次循环输出</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                stack<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> GL <span class=\"token operator\">-></span> numVertexes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t<span class=\"token comment\">//count 小于顶点数，说明存在换</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609082.png\" alt=\"image-20250105200720243\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609084.png\" alt=\"image-20250105200728655\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609085.png\" alt=\"image-20250105200736483\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609086.png\" alt=\"image-20250105200745491\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609087.png\" alt=\"image-20250105200755336\" /></p>\n<h2 id=\"关键路径\"><a class=\"anchor\" href=\"#关键路径\">#</a> 关键路径</h2>\n<p>拓扑排序主要是为解决一个工程能否顺利进行的问题，但有时我们还需要解决工程完成需要的最短时间问题。</p>\n<p>** <code>AOE网</code> ：** 在一个表示工程的带权有向图中，用顶点表示事件，用有向向边表示活动，用边上的权值表示活动的持续时间，这种有向图的边表示活动的网，我们称为 <code>AOE网</code></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609088.png\" alt=\"image-20250105201641515\" /></p>\n<p>（1）工程问题的 <code>AOE网</code> 中，从工程开始 (顶点) 到工程结束 (顶点) 之间路径长度最长的路径叫关键路径（最长路径！）</p>\n<p>（2）提前完成关键路径上的活动，工程进度会加快</p>\n<p>（3）提前完成非关键路径上的活动，对工程无帮助</p>\n<p>关键活动</p>\n<p>（1）关键路径上的所有活动称为关键活动</p>\n<p>（2）找到工程 <code>AOE</code>  中的所有关键活动，即找到了关键路径</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609089.png\" alt=\"image-20250105203712438\" /></p>\n<p>我们把路径上各个活动所持续的时间之和称为路径长度，从源点到汇点具有最大长度的路径叫关键路径，在关键路径上的活动叫关键活动</p>\n<h4 id=\"关键路径算法的原理\"><a class=\"anchor\" href=\"#关键路径算法的原理\">#</a> 关键路径算法的原理</h4>\n<p>我们需要定义如下几个参数：</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609090.png\" alt=\"image-20250105204307258\" /></p>\n<h4 id=\"关键路径算法\"><a class=\"anchor\" href=\"#关键路径算法\">#</a> 关键路径算法</h4>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609091.png\" alt=\"image-20250105204408824\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>etv<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ltv<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 事件最早发生时间和最迟发生时间数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>stack2<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 用于存储拓扑序列的栈</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> top2<span class=\"token punctuation\">;</span> \t\t<span class=\"token comment\">// 用于 stack2 的指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 拓扑排序</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Status <span class=\"token function\">TopologicalSort</span><span class=\"token punctuation\">(</span>GraphAdjList GL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 若 GL 无回路，则输出拓扑排序序列并返回 1，若有回路返回 0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    EdgeNode <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> gettop<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 用于栈指针下标</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 用于统计输出顶点的个数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 建栈将入度为 0 的顶点入栈</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>GL <span class=\"token operator\">-></span> numVertexes <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GL <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>in <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            stack<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    top2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 初始化事件最早发生时间数组</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    etv <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>GL <span class=\"token operator\">-></span> numVertexes <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> GL <span class=\"token operator\">-></span> numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        etv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    stack2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>GL <span class=\"token operator\">-></span> numVertexes <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        gettop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 输出 i 号顶点，并计数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        stack2<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>top2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> gettop<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 将弹出的顶点序号压入拓扑序列的栈</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> GL <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>gettop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstedge<span class=\"token punctuation\">;</span> e<span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> e <span class=\"token operator\">-></span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            k <span class=\"token operator\">=</span> e <span class=\"token operator\">-></span> adjvex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>GL <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                stack<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>etv<span class=\"token punctuation\">[</span>gettop<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> e <span class=\"token operator\">-></span> weight<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> etv<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">// 求各个顶点事件的最早发生时间 etv 的值</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                etv<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> etv<span class=\"token punctuation\">[</span>gettop<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> e <span class=\"token operator\">-></span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> GL <span class=\"token operator\">-></span> numVertexes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609092.png\" alt=\"image-20250105210959596\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 求关键路径，GL 为有向网，输出 G 的各项关键活动</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CriticalPath</span><span class=\"token punctuation\">(</span>GraphAdjList GL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    EdgeNode <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> gettop<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> ete<span class=\"token punctuation\">,</span> lte<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 声明活动最早发生时间和最迟时间变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">TopologicalSort</span><span class=\"token punctuation\">(</span>GL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 求拓扑序列，计算数组 etv 和 stack2 的值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ltv <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>GL <span class=\"token operator\">-></span> numVertexes <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 事件最早发生事件数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> GL <span class=\"token operator\">-></span> numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 初始化 ltv</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ltv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> etc<span class=\"token punctuation\">[</span>GL <span class=\"token operator\">-></span> numVertexes <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>top2 <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 计算 ltv</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        gettop <span class=\"token operator\">=</span> stack2<span class=\"token punctuation\">[</span>top2<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> GL <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>gettop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstedge<span class=\"token punctuation\">;</span> e<span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> e <span class=\"token operator\">-></span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            k <span class=\"token operator\">=</span> e <span class=\"token operator\">-></span> adjvex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ltv<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> e <span class=\"token operator\">-></span> weight <span class=\"token operator\">&lt;</span> ltv<span class=\"token punctuation\">[</span>gettop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 求各顶点事件最晚发生时间 ltv</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                ltv<span class=\"token punctuation\">[</span>gettop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ltv<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> e <span class=\"token operator\">-></span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> GL <span class=\"token operator\">-></span> numVertexes<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 求 ete,lte 和关键活动</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> GL <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>firstedge<span class=\"token punctuation\">;</span> e<span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> e<span class=\"token operator\">-></span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            k <span class=\"token operator\">=</span> e <span class=\"token operator\">-></span> adjvex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            ete <span class=\"token operator\">=</span> etv<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 活动最早发生时间</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            lte <span class=\"token operator\">=</span> ltv<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> e <span class=\"token operator\">-></span> weight<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 活动最迟发生时间</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ete <span class=\"token operator\">==</span> lte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t<span class=\"token comment\">// 两者相等即在关键路径上</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;v%d - v%d> length: %d \\n\"</span><span class=\"token punctuation\">,</span> GL <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> GL <span class=\"token operator\">-></span> adjList<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> e <span class=\"token operator\">-></span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行完拓扑排序后我们可以得到</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609093.png\" alt=\"image-20250105213503328\" /></p>\n<p>因为 <code>ltv</code>  初始化的时候是让整个数组等于栈顶元素的值了</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609094.png\" alt=\"image-20250105213857426\" /><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609095.png\" alt=\"image-20250105213926722\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609096.png\" alt=\"image-20250105214113939\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609097.png\" alt=\"image-20250105214147597\" /></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121609098.png\" alt=\"image-20250105214246623\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d5ZW9saGFkYS9hcnRpY2xlL2RldGFpbHMvMTM1NTEzNDg3\">参考链接</span></p>\n",
            "tags": [
                "计算机",
                "数据结构",
                "概念",
                "第6章",
                "数据结构"
            ]
        },
        {
            "id": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E7%AC%AC5%E7%AB%A0/%E6%A0%91/",
            "url": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E7%AC%AC5%E7%AB%A0/%E6%A0%91/",
            "title": "树",
            "date_published": "2025-01-12T07:51:01.840Z",
            "content_html": "<h2 id=\"一-树的概念与基本术语\"><a class=\"anchor\" href=\"#一-树的概念与基本术语\">#</a> 一、树的概念与基本术语</h2>\n<h3 id=\"1树的定义tree\"><a class=\"anchor\" href=\"#1树的定义tree\">#</a> 1. 树的定义 (Tree)</h3>\n<p>（1）树是有 n (n≥0) 个结点的有限集合。</p>\n<p>（2）如果 n=0，称为空树；</p>\n<p>（3）如果 n&gt;0, 称为非空树，对于非空树，有且仅有一个特定的称为根 (Root) 的节点 (无直接前驱)</p>\n<p>（4）如果 n&gt;1，则除根以外的其它结点划分为 m (m&gt;0) 个互不相交的有限集  <code>T1, T2 ,…, Tm</code> ，其中每个集合本身又是一棵树，并且称为根的子树 ( <code>SubTree</code> )。(此为递归定义)</p>\n<p>（5）每个结点都有唯一的直接前驱，但可能有多个后继。</p>\n<p>（6）m &gt; 0 时，子树的个数是没有限制的，但是他们一定是互不相交的。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606771.png\" alt=\"image-20250103183505596\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606772.png\" alt=\"image-20250103183716766\" /></p>\n<h3 id=\"2树的基本术语\"><a class=\"anchor\" href=\"#2树的基本术语\">#</a> 2. 树的基本术语</h3>\n<p>（1）结点：包含一个数据元素及若干指向其子树的分支；（包括分支！）</p>\n<p>（2）结点的度：结点拥有的子树数；结点的深度是从根结点开始自顶向下逐层累加；结点的高度是从叶节点开始自底向上逐层累加。</p>\n<p>（3）叶结点：度为 0 的结点 [没有子树的结点] (终端结点或叶结点 )</p>\n<p>（4）分支结点：度不为 0 的结点 [包括根结点]，也称为非终端结点。除根外称为内部结点。</p>\n<p>​\t注意：度不为 0 的结点，除根之外都是内部结点！</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606773.png\" alt=\"image-20250103183853153\" /></p>\n<p>（5）孩子：结点的子树的根 [直接后继，可能有多个]</p>\n<p>（6）双亲：孩子的直接前驱 [最多只能有一个]</p>\n<p>（7）兄弟：同一双亲的孩子</p>\n<p>（8）子孙：以某结点为根的树中的所有结点</p>\n<p>（9）祖先：从根到该结点所经分支上的所有结点</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606774.png\" alt=\"image-20250103183921949\" /></p>\n<p>（10）层次：根结点为第一层，其孩子为第二层，依此类推</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606775.png\" alt=\"image-20250103183943729\" /></p>\n<p>（11）深度：树中结点的<strong>最大层次</strong>（从根算第一层），也为树的高度。</p>\n<p>（12）有序树：子树之间存在确定的次序关系，不能互换的。</p>\n<p>（13）无序树：子树之间不存在确定的次序关系。</p>\n<p>（14）森林：互不相交的树的集合。对树中每个结点而言，其子树的集合即为森林。任何一棵非空树是一个二元组 Tree = （root，F）其中：root 被称为根结点 ，F 被称为子树森林。</p>\n<p>3. 树型结构与线性结构的区别在于：一个元素可以有多个后继。<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606776.png\" alt=\"image-20250103184129326\" /></p>\n<p>4. 树的相关性质：</p>\n<p>（1）树中的结点数等于所有结点的度数加一</p>\n<p>（2）度为 m 的树中第 i 层上至多有 <code>m^(i-1)</code>  个结点</p>\n<p>（3）高度为 h 的 m 叉树至多有 (m^h-1)/(m-1) 个结点</p>\n<p>（4）具有 n 个结点的 m 叉树的最小高度为 logm (n (m-1)+1)</p>\n<h2 id=\"树的抽象数据类型\"><a class=\"anchor\" href=\"#树的抽象数据类型\">#</a> 树的抽象数据类型</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ADT 树<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Data</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    树是由一个根结点和若干棵子树构成的。树中结点具有相同数据类型及层次关系</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Operation</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">InitTree</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>构造空树</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">DestroyTree</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>销毁树</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">CreateTree</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span> definition<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>按definition中给出树的定义来构造树</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">ClearTree</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>若树T存在，则将树T清为空树</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">TreeEmpty</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>判断是否为空树</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>返回T的深度</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">Root</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>返回T的根节点</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> cur_e<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>cur_e是树T中一个结点，返回此结点的值</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Assign</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> cur_e<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>给树T的结点cur_e赋值为value</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> cur_e<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>若cur_e是树的非根节点，则返回它的双亲，否则返回空</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">LeftChild</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> cur_e<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>若cur_e是树T的非叶节点，则返回它的最左孩子，否则返回空</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">RightSibling</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> cur_e<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>若cur_e有右兄弟，则返回它的右兄弟，否则返回空</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">InsertChild</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>其中p指向树T的某个结点，i为所指结点p的度加上<span class=\"token number\">1</span>，非空树c与T不相交，操作结果为插入c为数T中p所指结点的第i棵子树</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">DeleteChild</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>其中p指向数T的某个结点，i为所指结点p的度，操作结果为删除T中p所指结点的第i棵子树</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>endADT</pre></td></tr></table></figure><h2 id=\"树的存储结构\"><a class=\"anchor\" href=\"#树的存储结构\">#</a> 树的存储结构</h2>\n<h3 id=\"1-双亲表示法\"><a class=\"anchor\" href=\"#1-双亲表示法\">#</a> 1 双亲表示法</h3>\n<p>我们假设以一组连续空间存储树的结点，同时在每个结点中，附设一个指示器指示器双亲结点在数组中的位置。<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606777.png\" alt=\"image-20250103190221059\" /></p>\n<p>data 是数据域，存储结点的数据信息；parent 是指针域，存储该节点的双亲在数组中的下标。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 树的双亲表示法结点结构定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX_TREE_SIZE</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> TElemType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PTNode</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 结点结构</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    TElemType data<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 结点数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 双亲位置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span>PTNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t<span class=\"token comment\">// 树结构</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    PTNode nodes<span class=\"token punctuation\">[</span>MAX_TREE_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 结点数组</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 根的位置和结点数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span>PTree<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwNjc3OC5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121606778.png</span>&quot; alt=&quot;image-20250103190800310&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwNjc3OS5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121606779.png</span>&quot; alt=&quot;image-20250103190819273&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwNjc4MC5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121606780.png</span>&quot; alt=&quot;image-20250103190934620&quot; style=&quot;zoom: 50%;&quot; /&gt;</p>\n<h3 id=\"2-孩子表示法\"><a class=\"anchor\" href=\"#2-孩子表示法\">#</a> 2 孩子表示法</h3>\n<p>换一种完全不同的考虑方法。由于树中的每个结点可能右多棵子树，可以考虑用多重链表，即每个结点右多个指针域，其中每个指针指向一颗子树的根结点，我们把这种方法叫做多重链表表示法。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606781.png\" alt=\"image-20250103191541862\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606782.png\" alt=\"image-20250103191639079\" /></p>\n<p>优点：节省时间</p>\n<p>缺点：浪费空间</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606783.png\" alt=\"image-20250103191726395\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606784.png\" alt=\"image-20250103191747487\" /></p>\n<p>优点：节省空间</p>\n<p>缺点：耗费时间</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 树的孩子表示法结构定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX_TREE_SIZE</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> TElemType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">CTNode</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 孩子结点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> child<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 用来存储某个结点在表头数组中的下标</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">CTNode</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 用来存储指向某节点的下一个孩子结点的指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span>CTNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ChildPtr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t<span class=\"token comment\">// 表头结点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    TElemType data<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 存储某结点的数据信息</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ChildPtr firstchild<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 存储该结点的孩子链表的头指针</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span>CTBox<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t<span class=\"token comment\">// 树结构</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    CTBox nodes<span class=\"token punctuation\">[</span>MAX_TREE_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 结点数组</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 根的位置和结点数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span>CTree<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606785.png\" alt=\"image-20250103202248518\" /></p>\n<h3 id=\"3-孩子兄弟表示法\"><a class=\"anchor\" href=\"#3-孩子兄弟表示法\">#</a> 3 孩子兄弟表示法</h3>\n<p>任意一棵树，它的结点的第一个孩子如果存在就是唯一的，它的右兄弟如果存在也是唯一的。因此，我们设置两个指针，分别指向该结点的第一个孩子和此结点的右兄弟。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606786.png\" alt=\"image-20250103202646956\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 树的孩子兄弟表示法结构定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">CSNode</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    TElemType data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">CSNode</span> <span class=\"token operator\">*</span>firstchld<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rightsib<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>CSNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>CSTree<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606787.png\" alt=\"image-20250103202857425\" /></p>\n<p>其实这个表示法的最大好处是它把一棵复杂的树变成了一颗二叉树。</p>\n<p>这样我们可以充分的利用二叉树的特性和算法来处理这棵树了。</p>\n<h2 id=\"二叉树的定义\"><a class=\"anchor\" href=\"#二叉树的定义\">#</a> 二叉树的定义</h2>\n<p>** 二叉树：** 二叉树是 n (n&gt;=0) 结点的有限集合，该集合或者为空集 (称为空二叉树)，或者由一个根节点和两棵互不相交的，分别称为根结点的左子树和右子树的二叉树组成。</p>\n<p>1. 二叉树是一种特殊的树，每个结点最多有 2 棵子树，子树有左右之分。</p>\n<p>2. 在二叉树的第 i 层上最多有 2^(i-1) 个结点。</p>\n<p>3. 深度为 k 的二叉树最多有 2^k-1 个结点。</p>\n<p>4. 如果二叉树终端结点数为 <code>n0</code>  (也为叶子结点数), 度为 2 的结点数为 <code>n2</code> , 则 <code>n0=n2+1</code></p>\n<h2 id=\"特殊二叉树\"><a class=\"anchor\" href=\"#特殊二叉树\">#</a> 特殊二叉树</h2>\n<p>斜树：所有的结点都是只有左子树的二叉树叫做左斜树。所有结点都是右子树的二叉树叫右斜树。这两者统称为斜树。</p>\n<h3 id=\"满二叉树\"><a class=\"anchor\" href=\"#满二叉树\">#</a> 满二叉树</h3>\n<p>在一棵二叉树中，如果所有分支点都存在左子树和右子树，并且所有叶子都在同一层，这样的二叉树称为满二叉树。</p>\n<p>1. 一个深度为 k 且有 2^k-1 个结点的二叉树。</p>\n<p>2. 每层上的结点数都是最大数。</p>\n<p>3. 可以自上而下、自左至右连续编号。</p>\n<p>4. 叶子只能出现在最下一层</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606788.png\" alt=\"image-20250103204320237\" /></p>\n<h3 id=\"完全二叉树\"><a class=\"anchor\" href=\"#完全二叉树\">#</a> 完全二叉树</h3>\n<p>对一颗具有 n 个结点的二叉树按层序编号，如果编号为 i (1&lt;=i&lt;=n) 的结点与同样深度的二叉树中的编号为 i 的结点在二叉树中的卫视完全相同，则这棵树称为完全二叉树。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606789.png\" alt=\"image-20250103204757482\" /></p>\n<p>1. 当且仅当每一个结点都与深度相同的满二叉树中编号从 1 到 n 的结点一一对应的二叉树。</p>\n<p>2. 叶子结点只在最下两层上出现。</p>\n<p>3. 左子树深度与右子树深度相等或大１。</p>\n<p>4. 具有 n 个结点的完全二叉树，其深度为 <code>floor(log2(n)) +1</code></p>\n<p>5. 在完全二叉树中，结点 i 的双亲为 i/2;</p>\n<p>​\t结点 i 的左孩子 <code>LCHILD(i)=2i;</code></p>\n<p>​\t结点 i 的右孩子 <code>RCHILD(i)=2i+1.</code></p>\n<h2 id=\"二叉树的性质\"><a class=\"anchor\" href=\"#二叉树的性质\">#</a> 二叉树的性质</h2>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606790.png\" alt=\"image-20250103205315791\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606791.png\" alt=\"image-20250103205538666\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606792.png\" alt=\"image-20250103205339033\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606793.png\" alt=\"image-20250103205357092\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606794.png\" alt=\"image-20250103205628218\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606795.png\" alt=\"image-20250103205411524\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606796.png\" alt=\"image-20250103205423762\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606797.png\" alt=\"image-20250103205751746\" /></p>\n<h2 id=\"二叉树的存储结构\"><a class=\"anchor\" href=\"#二叉树的存储结构\">#</a> 二叉树的存储结构</h2>\n<h3 id=\"顺序存储\"><a class=\"anchor\" href=\"#顺序存储\">#</a> 顺序存储</h3>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606798.png\" alt=\"image-20250103205909941\" /></p>\n<h3 id=\"二叉链表\"><a class=\"anchor\" href=\"#二叉链表\">#</a> 二叉链表</h3>\n<p>二叉树每个结点最多有两个孩子，所以它设计一个数据域和两个指针域是比较自然的想法，我们称这样的链表叫做二叉链表。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606800.png\" alt=\"image-20250103210150269\" /></p>\n<pre><code class=\"language-CPP\">//二叉树的二叉链表结点结构定义\ntypedef struct BiTNode&#123;\n    TElemType data;\t\t\t\t//结点数据\n    struct BiTNode *lchild, *rchild;//左右孩子指针\n&#125;BiTNode, *BiTree;\n</code></pre>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606801.png\" alt=\"image-20250103210416693\" /></p>\n<h2 id=\"遍历二叉树\"><a class=\"anchor\" href=\"#遍历二叉树\">#</a> 遍历二叉树</h2>\n<p>1. 遍历二叉树：树的遍历就是按某种次序访问树中的结点，要求每个结点访问一次且仅访问一次（非线性结构线性化）。</p>\n<p>2. 一个二叉树由根节点与左子树和右子树组成，设访问根结点用 D 表示，遍历左、右子树用 L、R 表示，如果规定先左子树后右子树，则共有三种组合</p>\n<p>（1） <code>DLR [先序遍历]</code></p>\n<p>​\t规则是若二叉树为空，则空操作返回，否则先访问根节点，然后前序遍历左子树，再前序遍历右子树。<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606802.png\" alt=\"image-20250103210826866\" /></p>\n<p>遍历的顺序为： <code>ABDGHCEIF</code></p>\n<p>（2） <code>LDR [中序遍历]</code></p>\n<p>​\t规则是若树为空，则空操作返回，否则从根节点开始 (注意并不是先访问根节点)，中序遍历根节点的左子树，然后访问根节点，最后中序遍历右子树。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606803.png\" alt=\"image-20250103211201072\" /></p>\n<p>遍历的顺序为： <code>GDHBAEICF</code></p>\n<p>（3） <code>LRD [后序遍历]</code></p>\n<p>​\t规则是若树为空，则空操作返回，否则从左到右先叶子后结点的方式遍历访问左右子树，最后是访问根节点。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606804.png\" alt=\"image-20250103211414203\" /></p>\n<p>遍历的顺序为： <code>GHDBIEFCA</code></p>\n<p>（4） <code>层序遍历</code></p>\n<p>​\t规则是若树为空，则空操作返回，否则从树的第一层，也就是根节点开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606805.png\" alt=\"image-20250103211837759\" /></p>\n<p>遍历的顺序为： <code>ABCDEFGHI</code></p>\n<h3 id=\"前序遍历算法\"><a class=\"anchor\" href=\"#前序遍历算法\">#</a> 前序遍历算法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 二叉树的前序遍历递归算法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 初始条件：二叉树 T 存在</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 操作结果：前序递归遍历 T</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PreOrderTraverse</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> T <span class=\"token operator\">-></span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 显示结点数据，可以更改为其他对结点的操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">PreOrderTraverse</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">-></span> lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 先序遍历左子树</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">PreOrderTraverse</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">-></span> rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 先序遍历右子树</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"中序遍历算法\"><a class=\"anchor\" href=\"#中序遍历算法\">#</a> 中序遍历算法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 二叉树的中序遍历递归算法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 初始条件：二叉树存在</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 操作结果：中序递归遍历 T</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">-></span> lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 中序遍历左子树</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> T <span class=\"token operator\">-></span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 显示结点数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">-></span> rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 中序遍历右子树</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"后序遍历算法\"><a class=\"anchor\" href=\"#后序遍历算法\">#</a> 后序遍历算法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 二叉树的后序遍历递归算法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 初始条件：二叉树存在</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 操作结果：中序递归遍历 T</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>BiTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">-></span> lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 中序遍历左子树</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">InOrderTraverse</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">-></span> rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 中序遍历右子树</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> T <span class=\"token operator\">-></span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 显示结点数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"二叉树的建立\"><a class=\"anchor\" href=\"#二叉树的建立\">#</a> 二叉树的建立</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 按前序输入二叉树中的结点的值（一个字符）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//# 表示空树，构建二叉链表表示二叉树 T</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CreatBiTree</span><span class=\"token punctuation\">(</span>BiTree <span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 通过指针传入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    TElemType ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ch <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token char\">'#'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">*</span>T <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">*</span>T <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>BiTree<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>BiTNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>OVERFLOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> data <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 生成根节点</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">CreatBiTree</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 构造左子树</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">CreatBiTree</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 构造右子树</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"线索二叉树\"><a class=\"anchor\" href=\"#线索二叉树\">#</a> 线索二叉树</h2>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606806.png\" alt=\"image-20250103220052207\" /></p>\n<p>我们观察上图，会发现指针域并不是都充分利用了，有需许多的空指针的存在，这不是什么号的现象，应该想办法利用起来。</p>\n<p>线索二叉树：我们把指向前驱和后继的指针称为线索，加上线索的二叉链表称为线索链表，相应的二叉树就称为线索线索二叉树</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606807.png\" alt=\"image-20250103220515056\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606808.png\" alt=\"image-20250103221108599\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 二叉树的二叉线索存储结构定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> TElemType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span><span class=\"token punctuation\">&#123;</span>Link<span class=\"token punctuation\">,</span> Thread<span class=\"token punctuation\">&#125;</span> PointerTag<span class=\"token punctuation\">;</span><span class=\"token comment\">//Link==0 表示指向左右孩子指针，thread==1 表示指向前驱或后继的线索</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiThrNode</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 二叉线索存储结构</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    TElemType data<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 结点数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiThrNode</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span><span class=\"token comment\">// 左右孩子指针</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PointerTag LTag<span class=\"token punctuation\">;</span><span class=\"token comment\">// 左右标志</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    PointerTag RTag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>BiThrNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>BiThrTree<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>线索化的过程就是在遍历的过程中修改空指针的过程</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 中序遍历线索化的递归函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BiThrTree pre<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 全局变量，始终指向刚刚访问过的结点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 中序遍历进行中序线索化</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">InThreading</span><span class=\"token punctuation\">(</span>BiThrTree p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">InThreading</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">-></span> lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 递归左子树线索化</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p <span class=\"token operator\">-></span> lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 没有左孩子</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            p <span class=\"token operator\">-></span> LTag <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">;</span><span class=\"token comment\">// 前驱线索</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            p <span class=\"token operator\">-></span> lchild <span class=\"token operator\">=</span> Pre<span class=\"token punctuation\">;</span><span class=\"token comment\">// 左孩子指针指向前驱</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pre <span class=\"token operator\">-></span> rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 前驱没有右孩子</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            pre <span class=\"token operator\">-></span> RTag <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">;</span><span class=\"token comment\">// 线索化</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            pre <span class=\"token operator\">-></span> rchild <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span><span class=\"token comment\">// 前驱右孩子指针指向后继（当前结点 p）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        pre <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 保持 pre 指向 p 的前驱</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">InThreading</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">-></span> rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 递归右子树线索化</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>线索二叉树的遍历<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606809.png\" alt=\"image-20250104133225134\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//T 指向头结点，头结点左链 lchild 指向根节点，头结点右链 rchild 指向中序遍历</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 最后一个结点，中序遍历二叉线索链表表示第二叉树</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Status <span class=\"token function\">InOrderTraverse_Thr</span><span class=\"token punctuation\">(</span>BiThrTree T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    BiThrTree p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    p <span class=\"token operator\">=</span> T <span class=\"token operator\">-></span> lchild<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//p 指向根节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t<span class=\"token comment\">// 空树或遍历结束时，p ==T</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">-></span> LTag <span class=\"token operator\">==</span> Link<span class=\"token punctuation\">)</span><span class=\"token comment\">// 当 LTag==0 时循环到中序第一个结点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            p <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> lchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">-></span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 显示结点数据，可以更改为其他对结点的操作</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">-></span> RTag <span class=\"token operator\">==</span> Thread <span class=\"token operator\">&amp;&amp;</span> p <span class=\"token operator\">-></span> rchild <span class=\"token operator\">!=</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            p <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">-></span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 访问后继结点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        p <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> rchild<span class=\"token punctuation\">;</span><span class=\"token comment\">//p 进至其右子树根</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果所用的二叉树需要经常遍历或查找结点时需要某种遍历序列中的前驱和后继，那么采用线索二叉链表的存储结构就是非常不错的选择</p>\n<h2 id=\"树-森林与二叉树的转换\"><a class=\"anchor\" href=\"#树-森林与二叉树的转换\">#</a> 树、森林与二叉树的转换</h2>\n<h3 id=\"树转换为二叉树\"><a class=\"anchor\" href=\"#树转换为二叉树\">#</a> 树转换为二叉树</h3>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606810.png\" alt=\"image-20250104134739485\" /><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606811.png\" alt=\"image-20250104134746056\" /><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606812.png\" alt=\"image-20250104134753720\" /><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606813.png\" alt=\"image-20250104134802243\" /></p>\n<h3 id=\"森林转换为二叉树\"><a class=\"anchor\" href=\"#森林转换为二叉树\">#</a> 森林转换为二叉树</h3>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606814.png\" alt=\"image-20250104134858486\" /><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606815.png\" alt=\"image-20250104134922464\" /><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606816.png\" alt=\"image-20250104134929211\" /></p>\n<h3 id=\"二叉树转换为树\"><a class=\"anchor\" href=\"#二叉树转换为树\">#</a> 二叉树转换为树</h3>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606817.png\" alt=\"image-20250104135120697\" /><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606818.png\" alt=\"image-20250104135126713\" /><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606819.png\" alt=\"image-20250104135132655\" /><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606820.png\" alt=\"image-20250104135139353\" /></p>\n<h3 id=\"二叉树转换为森林\"><a class=\"anchor\" href=\"#二叉树转换为森林\">#</a> 二叉树转换为森林</h3>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606821.png\" alt=\"image-20250104135246001\" /><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606822.png\" alt=\"image-20250104135252920\" /><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606823.png\" alt=\"image-20250104135258137\" /><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606824.png\" alt=\"image-20250104135304049\" /></p>\n<p>（1）在有 <code>n</code>  个结点的二叉树中，必定存在 <code>n+1</code>  个空链域；</p>\n<p>（2）因为每个结点有两个链域（左、右孩子指针），因此共有 <code>2n</code>  个链域；</p>\n<p>（3）除根结点外，每个结点都有且仅有一个分支相连，即 <code>n-1</code>  个链域被使用。</p>\n<h2 id=\"树与森林\"><a class=\"anchor\" href=\"#树与森林\">#</a> 树与森林</h2>\n<p>1. 树的存储结构</p>\n<p>（1）双亲表示法：采用一组连续的存储空间；由于每个结点只有一个双亲，只需要一个指针。<img data-src=\"https://i-blog.csdnimg.cn/blog_migrate/14534fe942e56381de7a12ec1b1fad8a.png\" alt=\"img\" /></p>\n<p>（2）孩子表示法：可以采用多重链表，即每个结点有多个指针，最大缺点是空链域太多 [(d-1) n+1 个]。将每个结点的孩子排列起来，用单链表表示；将每个结点排列成一个线性表。<img data-src=\"https://i-blog.csdnimg.cn/blog_migrate/e48970eaff818db8ba39af07ad1da42d.png\" alt=\"img\" /></p>\n<p>（3）孩子兄弟表示法（常用）：采用二叉链表左边指针指向第一个孩子，右边指针指向兄弟。<img data-src=\"https://i-blog.csdnimg.cn/blog_migrate/8534f045d3416d9f80456e392b98a81c.png\" alt=\"img\" /></p>\n<p>2. 树与二叉树的对于关系</p>\n<p>（1）树与二叉树都可以采用二叉链表作存储结构。</p>\n<p>（2）任意给定一棵树，可以找到一个唯一的二叉树 (没有右子树)。</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/blog_migrate/e59356587a1801aae6c1ac38588d5e37.png\" alt=\"img\" /><img data-src=\"https://i-blog.csdnimg.cn/blog_migrate/d8f5145c4fd5a4606ecb16653b7d7281.png\" alt=\"img\" /></p>\n<p>3. 森林与二叉树的对应关系</p>\n<p>4. 树的遍历：</p>\n<p>（1）先根（次序）遍历（树的先根 ----- 二叉树的先序）</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/blog_migrate/17cfdc5def54dadd0bb73b28512a9adb.png\" alt=\"img\" /></p>\n<p>（2）后根（次序）遍历（树的后根 ----- 二叉树的中序）</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/blog_migrate/63e5036c2fcce2ebe01fa2615b36c67c.png\" alt=\"img\" /></p>\n<p>5. 森林的遍历：</p>\n<p>（1）先序遍历：依次从左至右对森林中的每一棵树进行先根遍历。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606825.png\" alt=\"image-20250104140014208\" /></p>\n<p>（2）中序遍历：依次从左至右对森林中的每一棵树进行后根遍历。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606826.png\" alt=\"image-20250104140046204\" /></p>\n<h2 id=\"赫夫曼树及其应用\"><a class=\"anchor\" href=\"#赫夫曼树及其应用\">#</a> 赫夫曼树及其应用</h2>\n<p>1. 最优二叉树</p>\n<p>（1）路径：从树中一个结点到另一个结点之间的分支构成这两个结点之间的路径</p>\n<p>（2）路径长度：路径上的分支数目</p>\n<p>（3）树的路径长度：从树根到每个结点的路径长度之和</p>\n<p>（4）结点的带权路径长度：从结点到树根之间的路径长度与结点上权的乘积</p>\n<p>（5）树的带权路径长度 ( <code>WPL</code> )：树中所有叶子结点的带权路径长度之和（是叶子结点！）</p>\n<p>（6）最优二叉树：假设二叉树有 n 个叶子，其每个叶子结点带权 <code>wi</code> ，则带权路径长度 <code>WPL</code>  最小的二叉树称为最优二叉树</p>\n<p>（7）赫夫曼 (Huffman) 树就是一棵最优二叉树</p>\n<p>2. 赫夫曼树</p>\n<p>（1）在 Huffman 树中，权值最大的结点离根最近；权值最小的结点离根最远。</p>\n<p>（2）构建算法：</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606827.png\" alt=\"image-20250104144826129\" /><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606828.png\" alt=\"image-20250104144838877\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606829.png\" alt=\"image-20250104145019658\" /></p>\n<p>注意：画图时每一次要把所有点都画出来！</p>\n<h3 id=\"哈夫曼编码\"><a class=\"anchor\" href=\"#哈夫曼编码\">#</a> 哈夫曼编码</h3>\n<p>当初，哈夫曼研究这种最优树的目的是为了解决当年远距离通信的数据传输的最优化问题<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606830.png\" alt=\"image-20250104145519779\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606831.png\" alt=\"image-20250104145730572\" /></p>\n<p>构造好哈夫曼树之后将权值左分支改为 0，右分支改为 1 后的哈夫曼树</p>\n<p>​\t1. 从 Huffman 树的每一个叶子结点开始</p>\n<p>​\t2、依次沿结点到根的路径，判断该结点是父亲结点的左孩子还是右孩子，如果是左\t孩子则得到编码‘0’，否则得到编码‘1’，先得到的编码放在后面</p>\n<p>​\t3、直到到达根结点，编码序列即为该叶子结点对应的 Huffman 编码</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121606832.png\" alt=\"image-20250104145829382\" /></p>\n<p>（4）译码算法：</p>\n<p>​\t1. 指针指向 Huffman 树的根结点，取第一个 Huffman 码</p>\n<p>​\t2、如果 Huffman 码为‘0’，将指针指向当前结点的左子树的根结点；如果 Huffman\t码为‘1’，将指针指向当前结点的右子树的根结点</p>\n<p>​\t3、如果指针指向的当前结点为叶子结点，则输出叶子结点对应的字符；否则，取下\t一个 Huffman 码，并返回 2</p>\n<p>​\t4、如果 Huffman 码序列未结束，则返回 1 继续译码</p>\n<p>Huffman 是一种前缀编码，解码时不会混淆</p>\n<p>如 GOOD 编码为：01011001</p>\n<p>如 Huffman 编码序列 01011001，译码后的字符串为 GOOD</p>\n<p>（5）前缀编码：指的是，任何一个字符的编码都不是同一字符集中另一个字符的编码的前缀。利用赫夫曼树可以构造一种不等长的二进制编码，并且构造所得的赫夫曼编码是一种最优前缀编码，即使所传电文的总长度最短。</p>\n<p>已知一颗完全二叉树第 7 层有 20 个结点，则整棵树的结点数？</p>\n<p>​\t83</p>\n<p>​\t第 i 层最多有 2 的 (i-1) 次方个</p>\n<p>​\t深度为 k 的满二叉树结点有 2 的 i 次方 - 1 个</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d5ZW9saGFkYS9hcnRpY2xlL2RldGFpbHMvMTM1NTEzNDg3\">参考链接</span></p>\n",
            "tags": [
                "计算机",
                "数据结构",
                "概念",
                "第5章",
                "数据结构"
            ]
        },
        {
            "id": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E7%AC%AC4%E7%AB%A0/1.%E4%B8%B2/",
            "url": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E7%AC%AC4%E7%AB%A0/1.%E4%B8%B2/",
            "title": "串",
            "date_published": "2025-01-12T07:51:01.833Z",
            "content_html": "<p>串是由零个或多个字符组成的有限序列，又叫字符串</p>\n<h3 id=\"串的比较\"><a class=\"anchor\" href=\"#串的比较\">#</a> 串的比较</h3>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121605168.png\" alt=\"image-20241225235955747\" /></p>\n<h3 id=\"串的抽象数据类型\"><a class=\"anchor\" href=\"#串的抽象数据类型\">#</a> 串的抽象数据类型</h3>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121605170.png\" alt=\"image-20241226000039564\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//T 为非空串，若主串 S 中的第 pos 个字符之后存在与 T 相等的字串</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 则返回第一个这样的子串在 S 中的位置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>String S<span class=\"token punctuation\">,</span> String T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    String sub<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        n <span class=\"token operator\">=</span> <span class=\"token function\">StrLength</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 得到主串 S 的长度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        m <span class=\"token operator\">=</span> <span class=\"token function\">StrLength</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 得到子串 T 的长度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        i <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">-</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">SubString</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">,</span>i m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 取主串中第 i 个位置开始长度与 T 相等的子串给 sub</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">StrCompare</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 如果两串不相等</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 如果两串相等</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">// 则返回 i 值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 若无子串与 T 相等</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"一-字符串\"><a class=\"anchor\" href=\"#一-字符串\">#</a> 一、字符串</h2>\n<h3 id=\"串的存储结构\"><a class=\"anchor\" href=\"#串的存储结构\">#</a> 串的存储结构</h3>\n<p><strong>串的顺序存储结构</strong></p>\n<p>​\t串的顺序存储结构是用一组地址连续的存储单元来存储串中的字符序列的</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121605171.png\" alt=\"image-20250102184308917\" /></p>\n<p><strong>串的链式存储结构</strong></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121605172.png\" alt=\"image-20250102184506282\" /></p>\n<p>1. 字符串是 n 个字符的有限序列。</p>\n<p>2. 字符串术语：</p>\n<p>（1）空串：不含任何字符的串，串长度 = 0。</p>\n<p>（2）空格串：仅由一个或多个空格组成的串。</p>\n<p>（3）子串：由串中任意个连续的字符组成的子序列。</p>\n<p>（4）主串：包含子串的串。</p>\n<p>（5）位置：字符在主串中的序号。子串在主串中的位置以子串第一个字符在主串中的位置来表示。</p>\n<p>（6）串相等的条件：当两个串的长度相等且各个对应位置的字符都相等时才相等。</p>\n<p>（7）<strong>模式匹配</strong>：确定子串在主串中首次出现的位置的运算</p>\n<p>（8）前缀子串：从一个字符串的第一个位置开始，到后续的任意一个字符结束（结束的位置不能时该串的最后一个字符），该范围内的字符组成一个前缀子串（例：n 字符串，又有 n-1 个前缀子串）</p>\n<p>（9）后缀子串：除第一个位置以外，其他任意一个位置开始到最后一个位置结束，该范围内的字符组成一个后缀子串</p>\n<p>3. 字符串与线性表的关系</p>\n<p>--- 串的逻辑结构和线性表极为相似：</p>\n<p>（1）它们都是线性结构。</p>\n<p>（2）串中的每个字符都仅有一个前驱和一个后继。</p>\n<p>--- 串与线性表又有区别，主要表现为：</p>\n<p>（1）串的数据对象约定是字符集。</p>\n<p>（2）在线性表的基本操作中，以 “单个元素” 作为操作对象。</p>\n<p>（3）在串的基本操作中，通常以 “串的整体” 作为操作对象，如：在串中查找某个子串、在串的某个位置上插入一个子串等。</p>\n<p>4. 字符串的操作</p>\n<p>13 种操作中的最小操作子集 (五种)：串赋值 <code>StrAssign</code> ; 串比较 <code>StrCompare</code> ; 求串长 <code>StrLength</code> ; 串联接 <code>Concat</code> ; 求子串 <code>SubString</code> 。</p>\n<p>最小操作集：</p>\n<p>这些操作不可能利用其他串操作来实现，反之，其他串操作（除串清除 <code>ClearString</code>  和串销毁 <code>DestroyString</code>  外）可在这个最小操作子集上实现。</p>\n<p>5. 字符串的操作 (index)</p>\n<p>（1）串匹配 (查找) 的定义:  <code>INDEX (S, T, pos)</code></p>\n<p>（2）初始条件：串 S 和 T 存在，T 是非空串， <code>1≤pos≤StrLength(S)</code> 。</p>\n<p>（3）操作结果：若主串 S 中存在和串 T 值相同的子串返回它在主串 S 中第 <code>pos</code>  个字符之后第一次出现的位置；否则函数值为 0。</p>\n<h2 id=\"二-串的表示和实现\"><a class=\"anchor\" href=\"#二-串的表示和实现\">#</a> 二、串的表示和实现</h2>\n<p>1. 定长顺序存储表示（静态存储分配）</p>\n<p>（1）用一组地址连续的存储单元存储字符序列。</p>\n<p>（2）如 C 语言中的字符串定义 (以 “\\0” 为串结束标志)  <code>char Str[MAXSTRLEN+1]</code> ;</p>\n<p>（3）定义了长度为 <code>MAXSTRLEN</code>  字符存储空间字符串长度可以是小于 <code>MAXSTRLEN</code>  的任何值（最长串长度有限制，多余部分将被截断）</p>\n<p>（4）隐含：一般可使用一个不会出现在串中的特殊字符在串值的尾部来表示串的结束。</p>\n<p>优点：便于系统自动实现。</p>\n<p>缺点：不利于某些操作 (如合并).</p>\n<p>例如，C 语言中以字符‵\\0′表示串值的终结，这就是为什么在上述定义中，串空间最大值 <code>maxstrlen</code>  为 256，但最多只能存放 255 个字符的原因。</p>\n<p>（5）显式：若不设终结符，可用一个整数来表示串的长度，那么该长度减 1 的位置就是串值的最后一个字符的位置（下标）。</p>\n<p>优点：便于在算法中用长度参数控制循环过程。</p>\n<p>2. 堆分配存储表示</p>\n<p>（1）在程序执行过程中，动态分配（ <code>malloc</code> ）一组地址连续的存储单元存储字符序列。</p>\n<p>（2）在 C++ 语言中，由 new 和 delete 动态分配与回收的存储空间称为堆。</p>\n<p>（3）堆分配存储结构的串既有顺序存储结构的特点，处理方便，操作中对串长又没有限制，更显灵活。</p>\n<p>3. 链存储表示</p>\n<p>（1）采用链表方式存储串值。</p>\n<p>（2）每个结点中，可以存放一个字符，也可以存放多个字符。</p>\n<p>（3）存储密度 = 数据元素所占存储位 / 实际分配的存储位。</p>\n<h3 id=\"三-串的匹配算法\"><a class=\"anchor\" href=\"#三-串的匹配算法\">#</a> 三、串的匹配算法</h3>\n<p>** 模式匹配：** 子串的定位操作通常称为串的模式匹配</p>\n<p>1. 求子串位置函数 Index ()</p>\n<p>（1）子串的定位操作通常称做串的模式匹配。</p>\n<p>（2）算法（穷举法，朴素算法，BF (Brute-Force) 算法）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回子串 T 在主串 S 中第 pos 个字符之后的位置，若不存在，则函数返回值为 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 其中，T 非空，1&lt;=pos&lt;=StrLength (S)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>String S<span class=\"token punctuation\">,</span> String T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//i 用于主串 S 中当前位置的下标值，从 pos 位置开始匹配</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//J 用于子串在 T 中的当前位置的下标值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> S<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> T<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 当 i 小于 S 的长度并且 j 小于 T 的长度时，循环继续</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> T<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 两字母相等</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 指针回退并进一位重新开始</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            i <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> j <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//i 退回到上次匹配首位的下一位</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//j 退回到子串的首位</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> T<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> i <span class=\"token operator\">-</span> T<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回子串在主串中 pos 位置后的首位置</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从主串的指定位置开始，将主串与模式（要查找的子串）的第一个字符比较：</p>\n<p>若相等，则继续逐个比较后续字符；若不等，从主串的下一个字符起再重新和模式的字符比较。</p>\n<p>（3）在最好的情况下，除比较成功的位置外，其余位置仅需比较一次（模式第一个字符），其时间复杂度为：O (n+m)(n，m 分别为主串和模式的长度)</p>\n<p>（4）但在最坏的情况下，如模式为‘00000001’，主串为‘0000000000000000000000000000000001’, 则每次模式的前 7 个 0 都要与主串逐一比较，因此，其时间复杂度为：O (n*m)</p>\n<p>2**. <code>KMP</code>  算法（时间复杂度 O (n+m))**</p>\n<p>（1）当一趟匹配过程中出现字符比较不等 (失配) 时</p>\n<p>--1. 不需回溯 i 指针</p>\n<p>--2. 利用已经得到的 “部分匹配” 的结果</p>\n<p>--3. 将模式向右 “滑动” 尽可能远的一段距离 (next [j]) 后，继续进行比较</p>\n<p>（2）在模式串中第 j 个字符 “失配” 时，模式串第 k 个字符再同主串中对应的失配位置 (i) 的字符继续进行比较 ： <code>p1p2…pk-1’ = ‘pj-k+1pj-k+2…pj-1</code></p>\n<p>k 值可以在做串的匹配之前，求出一般用 next 函数求取 k 值。</p>\n<p>（3）next 函数定义为（下标从 1 开始）：</p>\n<p>-- 当 j=1 时 next [j] = 0；</p>\n<p>--next [j] = max {k | 0&lt;k&lt;j 且 <code>p1…pk-1’=‘pj-k+1…pj-1</code> }；(直接等于 0~j-1 的字符串的最长公共前后缀的长度 + 1)</p>\n<p>-- 当其它情况时 next [j]=1。</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/blog_migrate/a7bb8cd87669683e21ee0c6045b5b29a.png\" alt=\"img\" /></p>\n<p>（4）next 函数定义为（下标从 0 开始）：</p>\n<p>-- 当 j=0 时 next [j] = -1；</p>\n<p>--next [j] = max {k | 0&lt;k&lt;j 且‘p0…pk-1’=‘pj-k…pj-1’}；(直接等于 0~j-1 的字符串的最长公共前后缀的长度)</p>\n<p>-- 当其它情况时 next [j]=0。</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/blog_migrate/9577123652917070830d2fcb363afd76.png\" alt=\"img\" /></p>\n<p>即寻找当前 j 前可相互重叠（不完全重叠）的最长真子串的长度。从第一个字符开始的子串的下一个元素的下标，指示出，如果 j 所指示的模式串的字符与目标串中的当前字符不相等时，j 应回退的位置。</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/blog_migrate/eff141823a0bacc009d06798baccd5ac.png\" alt=\"img\" /></p>\n<p>（5）求 next [j] 值的算法：</p>\n<p>--1. j 的初值为 0, next [0]=-1, k=-1</p>\n<p>--2. While (j &lt; 模式串长度 - 1) {</p>\n<p>--(1). 若 k=-1 或者 Tj=Tk, 则 j++,k++,next [j]=k</p>\n<p>--(2). 否则，k=next [k]</p>\n<p>}</p>\n<p>这实际上也是一个匹配的过程，不同在于：主串和模式串是同一个串。</p>\n<p>（6）KMP 算法：</p>\n<p>--1. 令 i 的初值为 pos,j 的初值为 0</p>\n<p>--2. While ((i &lt; 主串长度) 且 (j &lt; 模式串长度)) {</p>\n<p>--(1). 若 j=－1 或者 si=pj, 则 i++, j++</p>\n<p>--(2). 否则，j=next [j]</p>\n<p>}//j=－1 表示第一个字符失配</p>\n<p>（7）时间复杂度：</p>\n<p>KMP () 函数的时间复杂度为 O (n)，为了求模式串的 next 值，其算法与 KMP 很相似，其时间复杂度为 O (m)，因此，KMP 算法的时间复杂度为 O (n+m)。</p>\n<p>（8）nextval：</p>\n<p>--1. 首先计算 next</p>\n<p>--2. 比较当前字符 t.ch [j] 与其 next 值 k 所指字符 <span class=\"exturl\" data-url=\"aHR0cDovL3QuY2g=\">t.ch</span>[k]</p>\n<p>--（1）不等： nextval [j]=next [j]（即维持不变）</p>\n<p>--（2）相等： nextval [j]=nextval [k]</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/blog_migrate/6eded62fff34634d7b295031adc29c58.png\" alt=\"img\" /></p>\n<p>void getnext(string p)<br />\n{<br />\nint j,k;<br />\nj=0,k=-1;<br />\nnext[0]=-1;//!<br />\nwhile(j&lt;p.size()-1)<br />\n{<br />\nif(k==-1||T[j]==T[k])<br />\nnext[++j]=++k;<br />\nelse<br />\nk=next[k];<br />\n}<br />\n}<br />\n 大题题目重点：字符串匹配</p>\n<p>题目：求串 eefegeef 的 next 值。写出计算过程。假设主串为 eefeefegeebeefegeeb，写出 KMP 算法查找串 eefegeef 的过程。</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/blog_migrate/5cdb8d7fb335cf3a79cf57baf9d6cd65.jpeg\" alt=\"img\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d5ZW9saGFkYS9hcnRpY2xlL2RldGFpbHMvMTM1NTEzNDg3\">参考链接</span></p>\n<h2 id=\"kmp模式匹配算法的实现\"><a class=\"anchor\" href=\"#kmp模式匹配算法的实现\">#</a>  <code>KMP</code>  模式匹配算法的实现</h2>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121605173.png\" alt=\"image-20250102212207858\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过计算返回子串 T 的 next 数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">get_next</span><span class=\"token punctuation\">(</span>String T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    next<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> T<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 此处 T [0] 表示串 T 的长度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> T<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> T<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token operator\">++</span>k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            k <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 若字符不相同，则 k 值回溯</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>代码解析：首先我们已经知道当下标为 1 时，next 的值为 0，然后因为，在 i 与 k 加 1 之前，k 是从头开始遍历的，当 T [k] 与 T [i] 相等时，i 与 k 都往后移动意味，判断是否相等，知道遇到 T [k] 与 T [i] 不相等的情况，然后将 k 回溯。<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121605174.png\" alt=\"image-20250102213337696\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回子串 T 在主串 S 中第 pos 个字符之后的位置，若不存在，则函数返回 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//T 非空，1&lt;=pos&lt;=SttLength (S)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Index_KMP</span><span class=\"token punctuation\">(</span>String S<span class=\"token punctuation\">,</span> String T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">get_next</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> S<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> T<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> T<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token operator\">++</span>J</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> T<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> i <span class=\"token operator\">-</span> T<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"kmp模式匹配算法的改进\"><a class=\"anchor\" href=\"#kmp模式匹配算法的改进\">#</a> KMP 模式匹配算法的改进</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 求模式串 T 的 next 函数修正值并存入数组 nextval</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">get_nextval</span><span class=\"token punctuation\">(</span>String T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>nextval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    nextval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> T<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 此处 T [0] 表示串的长度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> T<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> T<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//T [i] 表示后缀的单个字符，T [k] 表示前缀的单个字符</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token operator\">++</span>k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> T<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 若当前字符与前缀字符不同</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                nextval<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span><span class=\"token comment\">// 则当前的 k 为 nextval 在 i 位置的值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                nextval<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nextval<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果与前缀字符相同，则将前缀字符的 nextval 值赋值给 nextval 在 i 位置的值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            k <span class=\"token operator\">=</span> nextval<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 若字符不相同，则 k 值回溯</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121605175.png\" alt=\"image-20250102215208981\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121605176.png\" alt=\"image-20250102215221459\" /></p>\n",
            "tags": [
                "计算机",
                "数据结构",
                "概念",
                "第4章",
                "数据结构"
            ]
        },
        {
            "id": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E7%AC%AC3%E7%AB%A0/2.%20%E9%98%9F%E5%88%97/",
            "url": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E7%AC%AC3%E7%AB%A0/2.%20%E9%98%9F%E5%88%97/",
            "title": "1.队列",
            "date_published": "2025-01-12T07:51:01.825Z",
            "content_html": "<p>队列：队列是只允许在一端进行插入操作，而在另一端进行删除操作的线性表</p>\n<p>队列是一种先进先出（First In First out ) 的线性表，简称 <code>IFIO</code> 。允许插入的一端为<strong>队尾</strong>，允许删除的一端为<strong>队头</strong></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121604238.png\" alt=\"image-20241225202753848\" /></p>\n<h2 id=\"队列的抽象数据结构\"><a class=\"anchor\" href=\"#队列的抽象数据结构\">#</a> 队列的抽象数据结构</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ADT 队列<span class=\"token punctuation\">(</span>Queue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Data </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    同线性表的元素具有相同的类型，相邻匀速具有前驱和后继关系</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Operation</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">InitQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Q<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>初始化操作，建立一个空队列Q</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">DestroyQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Q<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>若队列存在，销毁它</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">ClearQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Q<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>将队列Q清空</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">QueuueEmpty</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Q<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>判断队列是否为空</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">GetHead</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>若队列存在并且非空，用e返回对头与元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Q<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>若队列存在，插入新元素e到队列中并成为队尾元素</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">DeQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Q<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>删除队头元素，并返回值</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">QueueLength</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>返回队列中的元素个数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>endADT</pre></td></tr></table></figure><h2 id=\"循环队列\"><a class=\"anchor\" href=\"#循环队列\">#</a> 循环队列</h2>\n<p>顺序存储<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121604104.png\" alt=\"image-20241225231221240\" /></p>\n<p><strong>循环队列的定义</strong></p>\n<p>我们把头尾相连的顺序存储结构称为循环队列</p>\n<p>我们设置的队列满的条件是有一个空位置</p>\n<p>由于 rear 可能比 front 大，也可能比它小，所以队列的最大尺寸为 <code>QueueSize</code> ，那么队列满的条件是 <code>（rear+1)%QueueSize==front</code></p>\n<p>然后队列的长度为 <code>（rear-front+QueueSize)%QueuSize</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> QElemType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 循环队列的顺序存储结构</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    QelemType data<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> rear<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> front<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SqQueue<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始化一个空循环队列</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Status <span class=\"token function\">InitQueue</span><span class=\"token punctuation\">(</span>SqQueue <span class=\"token operator\">*</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Q <span class=\"token operator\">-></span> front <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Q <span class=\"token operator\">-></span> rear <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回 Q 的元素个数，也就是队列的长度</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">QueueLength</span><span class=\"token punctuation\">(</span>SqQueue Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Q <span class=\"token operator\">-></span> rear <span class=\"token operator\">-</span> Q <span class=\"token operator\">-></span> front <span class=\"token operator\">+</span> MAXSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MAXSIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 若队列未满，插入新元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Status <span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span>SqQueue <span class=\"token operator\">*</span>Q<span class=\"token punctuation\">,</span> QElemType e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Q <span class=\"token operator\">-></span> rear <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MAXSIZE <span class=\"token operator\">==</span> Q <span class=\"token operator\">-></span> front<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Q <span class=\"token operator\">-></span> data<span class=\"token punctuation\">[</span>Q <span class=\"token operator\">-></span> rear<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Q <span class=\"token operator\">-></span> rear <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Q <span class=\"token operator\">-></span> rear<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MAXSIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 若循环队列不空，删除 Q 中的数据元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Status <span class=\"token function\">DeQueue</span><span class=\"token punctuation\">(</span>SqQueue <span class=\"token operator\">*</span>Q<span class=\"token punctuation\">,</span> QElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Q <span class=\"token operator\">-></span> front <span class=\"token operator\">==</span> Q <span class=\"token operator\">-></span> rear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> Q <span class=\"token operator\">-></span> data<span class=\"token punctuation\">[</span>Q <span class=\"token operator\">-></span> front<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Q <span class=\"token operator\">-></span> front <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Q <span class=\"token operator\">-></span> front <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MAXSIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"队列的链式存储结构\"><a class=\"anchor\" href=\"#队列的链式存储结构\">#</a> 队列的链式存储结构</h2>\n<p>队列的链式存储结构，其实就是线性表的单链表，只不过它只能队尾进，头出，我们把它简称为链队列。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 链队列的存储结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> QElemType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">QNode</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    QElemType data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">QNode</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>QNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>QueuePtr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    QueuePtr rear<span class=\"token punctuation\">,</span> front<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>LinkQueue<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>队列的链式存储结构 ---- 入队操作</strong><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121604105.png\" alt=\"image-20241225234028784\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入元素 e 为新的队尾元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Status <span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span>LinkQueue <span class=\"token operator\">*</span>Q<span class=\"token punctuation\">,</span> QElemType e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    QueuePtr s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>QueuePtr<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>QNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 存储分配失败</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>OVERFLOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    s <span class=\"token operator\">-></span> data <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    s <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Q <span class=\"token operator\">-></span> rear <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Q <span class=\"token operator\">-></span> rear <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>队列的链式存储结构 ---- 出队操作</strong><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121604106.png\" alt=\"image-20241225234038074\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 若对列不为空，删除对头元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Status <span class=\"token function\">DeQueue</span><span class=\"token punctuation\">(</span>LinkQueue <span class=\"token operator\">*</span>Q<span class=\"token punctuation\">,</span> QElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    QueuePtr p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Q <span class=\"token operator\">-></span> rear <span class=\"token operator\">==</span> Q <span class=\"token operator\">-></span> front<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 判断是否为空</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    p <span class=\"token operator\">=</span> Q <span class=\"token operator\">-></span> front <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 首先因为有一个不存储信息的头结点，front 指针一直指向它，所有对头数据元素为这个</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Q <span class=\"token operator\">-></span> front <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将头结点出队</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Q <span class=\"token operator\">-></span> rear <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 如果队头元素为队尾元素，则在出对时不要忘记指向改结点的尾指针</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Q <span class=\"token operator\">-></span> rear <span class=\"token operator\">=</span> Q <span class=\"token operator\">-></span> front<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>栈是限定仅在表尾进行插入与删除操作的线性表</p>\n<p>队列是只允许在一端进行插入操作，而在另一端进行删除操作的线性表</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121604107.png\" alt=\"image-20241225235348195\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121604108.png\" alt=\"image-20241225235407635\" /></p>\n",
            "tags": [
                "计算机",
                "数据结构",
                "概念",
                "第3章",
                "数据结构"
            ]
        },
        {
            "id": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E7%AC%AC3%E7%AB%A0/1.%20%E6%A0%88/",
            "url": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E7%AC%AC3%E7%AB%A0/1.%20%E6%A0%88/",
            "title": "1.栈",
            "date_published": "2025-01-12T07:51:01.823Z",
            "content_html": "<p>栈：栈是仅限在表尾进行插入和删除操作的线性表</p>\n<h2 id=\"栈的基本概念\"><a class=\"anchor\" href=\"#栈的基本概念\">#</a> 栈的基本概念</h2>\n<p>** 栈顶：** 允许插入和删除的一端称为栈顶，另一端则为栈底</p>\n<p>** 空栈：** 不含任何数据元素的栈为空栈</p>\n<p>栈又称为后进后出（Last in First Out）的线性表，简称 <code>LIFO</code>  结构。</p>\n<p>栈的插入操作，叫做<strong>进栈</strong>，也称压栈，入栈。</p>\n<p>栈的删除操作，叫做<strong>出栈</strong>，有点也叫做弹栈。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121603315.png\" alt=\"image-20241225145815877\" /></p>\n<h3 id=\"进栈出栈变化形式\"><a class=\"anchor\" href=\"#进栈出栈变化形式\">#</a> <strong>进栈出栈变化形式</strong></h3>\n<p>如果有三个整型数字元素 1，2，3 依次进栈，会有哪些出栈次序呢？</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121603316.png\" alt=\"image-20241225150059781\" /></p>\n<p>有没有种可能是 3，1，2 这样的次序出栈呢？肯定没有可能，如果 3 先出栈，则意味着 3 进栈了，那么 1，2，也早已经进栈 2 一定在 1 的上面，则出栈顺序为 3，2，1</p>\n<h3 id=\"栈的抽象数据类型\"><a class=\"anchor\" href=\"#栈的抽象数据类型\">#</a> 栈的抽象数据类型</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ADT 栈（stack）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Data </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t同线性表o元素具有相同的类型，相邻元素具有前驱后继关系</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>operation</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">InitStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>S<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>初始化操作，建立一个空栈</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">DestroyStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>S<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>若栈存在，则销毁它</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">ClearStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>S<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>将栈清空</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>判断栈是否为空</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">GetTop</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>若栈存在且不为空，用e返回栈顶元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">Push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>S<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>若栈S存在，插入新元素e到栈中，并称为栈顶元素</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>S<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>删除S的栈顶元素，并返回出栈元素</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">StackLength</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>返回栈的元素个数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>endADT</pre></td></tr></table></figure><h2 id=\"栈的顺序存储结构\"><a class=\"anchor\" href=\"#栈的顺序存储结构\">#</a> 栈的顺序存储结构</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> SElemType<span class=\"token punctuation\">;</span> <span class=\"token comment\">//SElemType 类型根据实际情况而定，这里假设为 int</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 顺序栈结构</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    SElemType data<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> top<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 用于栈顶指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SqStack<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121603317.png\" alt=\"image-20241225160156267\" /></p>\n<h3 id=\"栈的顺序存储结构-进栈操作\"><a class=\"anchor\" href=\"#栈的顺序存储结构-进栈操作\">#</a> 栈的顺序存储结构 ---- 进栈操作</h3>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121603318.png\" alt=\"image-20241225160402417\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入元素 e 为新的栈顶元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Status <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>SqStack <span class=\"token operator\">*</span>S<span class=\"token punctuation\">,</span> SElemType e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>S <span class=\"token operator\">-></span> top <span class=\"token operator\">==</span> MAXSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 栈满</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    S <span class=\"token operator\">-></span> top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 栈顶指针加 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    S <span class=\"token operator\">-></span> data<span class=\"token punctuation\">[</span>S <span class=\"token operator\">-></span> top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将新元素赋值给栈顶空间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> Ok<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"栈的顺序存储结构-出栈操作\"><a class=\"anchor\" href=\"#栈的顺序存储结构-出栈操作\">#</a> 栈的顺序存储结构 ---- 出栈操作</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 若栈不为空，则删除 S 的栈顶元素，用 e 返回值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Status <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span>SqStack <span class=\"token operator\">*</span>S<span class=\"token punctuation\">,</span> SElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>S <span class=\"token operator\">-></span> top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> S <span class=\"token operator\">-></span> data<span class=\"token punctuation\">[</span>S <span class=\"token operator\">-></span> top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回出栈的值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    S <span class=\"token operator\">-></span> top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 栈顶指针减 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> Ok<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>进栈与出栈时间复杂度皆为 O (1).</p>\n<h3 id=\"两栈共享空间\"><a class=\"anchor\" href=\"#两栈共享空间\">#</a> 两栈共享空间</h3>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121603319.png\" alt=\"image-20241225161314429\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 两栈共享空间结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    SElemType data<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> top1<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 栈 1 栈顶指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> top2<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 栈 2 栈顶指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SqDoubleStack<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入元素 e 为新的栈顶元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Status <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>SqDoubleStack <span class=\"token operator\">*</span>S<span class=\"token punctuation\">,</span> SElemType e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> StackNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>S <span class=\"token operator\">-></span> top1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> S <span class=\"token operator\">-></span> top2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 栈满，不能 push 新的元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>StackNumber <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 栈 1 有元素进栈</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        S <span class=\"token operator\">-></span> data<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>S <span class=\"token operator\">-></span> top1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span><span class=\"token comment\">//top1+1 后再给数组赋值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>StackNumber <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 栈 2 有元素进栈</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        S <span class=\"token operator\">-></span> data<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>S <span class=\"token operator\">-></span> top2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//top2-1 后给数组赋值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 若栈部位空，则删除 S 的栈顶元素，用 e 返回其值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Status <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span>SqDoubleStack <span class=\"token operator\">*</span>S<span class=\"token punctuation\">,</span> SElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> StackNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>StackNumber <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>S <span class=\"token operator\">-></span> top1 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   \t<span class=\"token comment\">// 栈 1 为空栈，溢出</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> S <span class=\"token operator\">-></span> data<span class=\"token punctuation\">[</span>S <span class=\"token operator\">-></span> top1<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将栈顶元素出栈</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>StackNumber <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>S <span class=\"token operator\">-></span> top2 <span class=\"token operator\">==</span> MAXSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 栈 2 为空栈</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> S <span class=\"token operator\">-></span> data<span class=\"token punctuation\">[</span>S <span class=\"token operator\">-></span> top2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将栈 2 的栈顶元素出栈</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"栈的链式存储结构\"><a class=\"anchor\" href=\"#栈的链式存储结构\">#</a> 栈的链式存储结构</h2>\n<h3 id=\"栈的链式存储结构-2\"><a class=\"anchor\" href=\"#栈的链式存储结构-2\">#</a> 栈的链式存储结构</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 链栈结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">StackNode</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    SElemType data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">StackNode</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>StackNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>LinkStackPtr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    LinkStackPtr top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>LinkStack<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"栈的链式存储结构-进栈操作image-20241225163642749\"><a class=\"anchor\" href=\"#栈的链式存储结构-进栈操作image-20241225163642749\">#</a> 栈的链式存储结构 ---- 进栈操作<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121603320.png\" alt=\"image-20241225163642749\" /></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Status <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span>S<span class=\"token punctuation\">,</span> SElemType e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tLinkStackPtr s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkStackPtr<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>StackNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    s <span class=\"token operator\">-></span> data <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    s <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> S <span class=\"token operator\">-></span> top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    S <span class=\"token operator\">-></span> top <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    S <span class=\"token operator\">-></span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"栈的链式存储结构-出栈操作image-20241225163725774\"><a class=\"anchor\" href=\"#栈的链式存储结构-出栈操作image-20241225163725774\">#</a> 栈的链式存储结构 ---- 出栈操作<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121603321.png\" alt=\"image-20241225163725774\" /></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 若栈不空，删除栈顶元素，用 e 返回其值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Status <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span>LinkStack <span class=\"token operator\">*</span>S<span class=\"token punctuation\">,</span> SElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    LinkStackPtr p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 栈为空</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> S <span class=\"token operator\">-></span> top <span class=\"token operator\">-></span> data<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将栈顶元素返回</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    p <span class=\"token operator\">=</span> S <span class=\"token operator\">-></span> top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    S <span class=\"token operator\">-></span> top <span class=\"token operator\">=</span> S <span class=\"token operator\">-></span> top <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span><span class=\"token comment\">// 栈顶指针下移</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 释放原栈顶结点空间</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    S <span class=\"token operator\">-></span> count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>注意：</strong></p>\n<p>如果栈顶使用过程中元素变化不可预料，有时很小，有时非常大，最好使用链栈，反之，如果它的变化再可控范围内，建议使用顺序栈会更好一点</p>\n<h2 id=\"栈的使用\"><a class=\"anchor\" href=\"#栈的使用\">#</a> 栈的使用</h2>\n<h3 id=\"栈的应用-递归\"><a class=\"anchor\" href=\"#栈的应用-递归\">#</a> 栈的应用 ---- 递归</h3>\n<p><strong>斐波那契数列的实现</strong><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121603322.png\" alt=\"image-20241225165949915\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121603323.png\" alt=\"image-20241225165922360\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121603324.png\" alt=\"image-20241225165934449\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 打印前四十位斐波那契数列</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 递归实现</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Fbi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">Fbi</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">Fbi</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"递归显示斐波那契数列：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Fbi</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121603325.png\" alt=\"image-20241225170640614\" /></p>\n<p>** 递归函数：** 我们把一个直接调用自己或通过一系列的调用语句简介的调用自己的函数称为递归函数。</p>\n<p>注意：每个递归定义必须至少有一个条件，满足时递归不再进行，即不再引用自身而返回值推出。</p>\n<p><strong>然后栈与递归到底有什么关系呢？这的从计算机内部说起。</strong></p>\n<ul>\n<li>递归过程的退回的顺序是它前行顺序的逆序。再退回过程中，可能要执行某些动作，包括恢复在前行过程中存储起来的某些数据。</li>\n<li>这种存储某些数据，并在后面又以存储的逆序恢复这些数据，以提供之后使用的需求，显然很符合栈这种数据结构。</li>\n<li>简单来说，就是一开始，对于每一层递归，函数的局部变量，参数值以及返回地址都被压入栈中。在退回阶段，位于栈顶的局部变量，参数值和返回地址被弹出，用与返回调用层次中执行代码的其余部分，也就恢复了带哦用的状态。</li>\n<li>对于高级语言，这样的递归问题是不需要用户来管理这个栈的，一切都是由系统代劳了。</li>\n</ul>\n<h3 id=\"栈的应用-四则运算表达式求值\"><a class=\"anchor\" href=\"#栈的应用-四则运算表达式求值\">#</a> 栈的应用 ---- 四则运算表达式求值</h3>\n<h4 id=\"后缀表示法的定义img-srchttpsgiteecomgood_glorypicgorawmaster202501121603326png-altimage-20241225172208079-stylezoom-67\"><a class=\"anchor\" href=\"#后缀表示法的定义img-srchttpsgiteecomgood_glorypicgorawmaster202501121603326png-altimage-20241225172208079-stylezoom-67\">#</a> <strong>后缀表示法的定义</strong> &lt; img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzMyNi5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603326.png</span>&quot; alt=&quot;image-20241225172208079&quot; style=&quot;zoom: 67%;&quot; /&gt;</h4>\n<p>一种不用括号的后缀表达法，我们把它称为逆波兰表示</p>\n<p>** 叫后缀的原因在于：** 所有的符号都在要运算的数字的后面</p>\n<h4 id=\"后缀表达式的计算结果\"><a class=\"anchor\" href=\"#后缀表达式的计算结果\">#</a> 后缀表达式的计算结果</h4>\n<ol>\n<li>\n<p>初始化一个空栈，此栈用来对要运算的树数字进出使用。&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzMyNy5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603327.png</span>&quot; alt=&quot;image-20241225195333075&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n</li>\n<li>\n<p>后缀表达式中前三个都是数字，所以 9，3，1 进栈如图所示 &lt; img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzMyOC5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603328.png</span>&quot; alt=&quot;image-20241225195439177&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n</li>\n<li>\n<p>接下来是 “—”，所以将栈中的 1 出栈作为减数，3 出栈作为被减数，并运算 3-1 得到 2，再将 2 进栈 &lt; img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzMyOS5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603329.png</span>&quot; alt=&quot;image-20241225195743291&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n</li>\n<li>\n<p>接着是数字 3 进栈 &lt; img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzMzMC5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603330.png</span>&quot; alt=&quot;image-20241225195727573&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n</li>\n<li>\n<p>后面是 “*”，也就意味着栈中 3 和 2 出栈，2 和 3 相乘，得到 6，并将 6 进栈 &lt; img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzMzMS5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603331.png</span>&quot; alt=&quot;image-20241225195859812&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n</li>\n<li>\n<p>下面是 “+”，所以栈中 6 和 9 出栈，9 与 6 相加，得到 15，并将 15 进栈 &lt; img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzMzMi5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603332.png</span>&quot; alt=&quot;image-20241225200008459&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n</li>\n<li>\n<p>接着是 10 与 2 进栈 &lt; img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzMzMy5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603333.png</span>&quot; alt=&quot;image-20241225200035651&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n</li>\n<li>\n<p>接下来是 “/”，将 2 与 10 出栈并相除，10/2 得到 5，将 5 进栈 &lt; img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzMzNC5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603334.png</span>&quot; alt=&quot;image-20241225200245143&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n</li>\n<li>\n<p>最后一个符号是 “+”，所以 15 与 5 出栈并相加，得到 20，将 20 进栈 &lt; img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzMzNS5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603335.png</span>&quot; alt=&quot;image-20241225200308981&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n</li>\n<li>\n<p>结果是 20，出栈，栈变成空</p>\n</li>\n</ol>\n<h4 id=\"中缀表达式到后缀表达式\"><a class=\"anchor\" href=\"#中缀表达式到后缀表达式\">#</a> <strong>中缀表达式到后缀表达式</strong>：</h4>\n<ul>\n<li>使用 <strong>操作符栈</strong>来存储运算符，并根据运算符的优先级和括号进行操作。</li>\n<li>步骤：\n<ol>\n<li>从左到右扫描表达式。</li>\n<li>如果是操作数（数字或变量），则直接输出。</li>\n<li>如果是左括号  <code>(</code> ，则压入栈中。</li>\n<li>如果是右括号  <code>)</code> ，则从栈中弹出运算符并输出，直到遇到左括号，丢弃左括号。</li>\n<li>如果是运算符，则根据运算符优先级进行比较。若栈顶运算符优先级高或相同，则将栈顶运算符弹出并输出；否则，压入栈中。</li>\n<li>扫描完毕后，将栈中剩余的运算符全部弹出并输出。</li>\n</ol>\n</li>\n</ul>\n<p>** 例如：**9 +（3-1）*3+10/2 转化为后缀表达式为 <code>9 3 1-3*+10 2/+</code></p>\n<ol>\n<li>初始化一个空栈（操作符栈），用来对符号进出栈使用</li>\n<li>第一个字符是 9，输出 9，后面符号是 “+”，进栈</li>\n<li>第三个字符是 “（”，进栈，未配对不出栈</li>\n<li>第四个是数字 3，输出，接着是 “-”，进栈、</li>\n<li>接下来是数字 1，输出，后面是 “）”，此时与前面的 “（‘配对输出”-“</li>\n<li>接着是” <code>*</code> “，因为此时的栈顶元素为”+“，优先级低于 <code>*</code> , 一次不输出，* 进栈接着是数字 3，输出</li>\n<li>之后是符号 “+”，此时栈顶元素为 *，高于 “+”，因此栈中元素出栈并输出，然后 “+” 进栈</li>\n<li>接着是数字 10. 输出，然后是 “/” 优先级比栈顶元素高，进栈</li>\n<li>最后一个数字是 2，输出</li>\n<li>因为已经到最后了，所以将栈中的法号全部输出最后的结果为所求</li>\n</ol>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzMzNi5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603336.png</span>&quot; alt=&quot;image-20241225202035702&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzMzNy5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603337.png</span>&quot; alt=&quot;image-20241225202042157&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzMzOC5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603338.png</span>&quot; alt=&quot;image-20241225202048704&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzMzOS5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603339.png</span>&quot; alt=&quot;image-20241225202054079&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzM0MC5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603340.png</span>&quot; alt=&quot;image-20241225202059774&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzM0MS5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603341.png</span>&quot; alt=&quot;image-20241225202104785&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzM0My5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603343.png</span>&quot; alt=&quot;image-20241225202111849&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzM0NC5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603344.png</span>&quot; alt=&quot;image-20241225202116723&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzM0NS5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603345.png</span>&quot; alt=&quot;image-20241225202121679&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMzM0Ni5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121603346.png</span>&quot; alt=&quot;image-20241225202126502&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>最重要的其实是这两步：</p>\n<ul>\n<li>将中缀表达式转化为后缀表达式（栈用来进出符号）</li>\n<li>将后缀表达式进行运算得出结果（栈用来进出运算的数字）</li>\n</ul>\n",
            "tags": [
                "计算机",
                "数据结构",
                "概念",
                "第3章",
                "数据结构"
            ]
        },
        {
            "id": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E7%AC%AC2%E7%AB%A0/%E7%BA%BF%E6%80%A7%E8%A1%A8/",
            "url": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E7%AC%AC2%E7%AB%A0/%E7%BA%BF%E6%80%A7%E8%A1%A8/",
            "title": "线性表",
            "date_published": "2025-01-12T07:51:01.818Z",
            "content_html": "<h2 id=\"一-线性数据结构的特点\"><a class=\"anchor\" href=\"#一-线性数据结构的特点\">#</a> 一、线性数据结构的特点</h2>\n<p>在数据元素的非空有限集中 ：</p>\n<ul>\n<li>\n<p>存在惟一的一个被称作 “第一个” 的数据元素。</p>\n</li>\n<li>\n<p>存在惟一的一个被称作 “最后一个” 的数据元素。</p>\n</li>\n<li>\n<p>除第一个元素外，每个数据元素均只有一个前驱 。</p>\n</li>\n<li>\n<p>除最后一个元素外，每个数据元素均只有一个后继 。</p>\n</li>\n</ul>\n<h2 id=\"二-线性表的定义\"><a class=\"anchor\" href=\"#二-线性表的定义\">#</a> 二、线性表的定义</h2>\n<ul>\n<li>线性表是最简单的一类线性数据结构。</li>\n<li>线性表是由 n 个数据元素组成的有限序列，相邻数据元素之间存在着序偶关系，可以写为： <code>(a1, a2,…ai-1, ai, ai+1,…an-1, an)</code>  其中，ai 是表中元素，i 表示元素 ai 的位置，n 是表的长度。<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121601039.png\" alt=\"image-20241224194547476\" /></li>\n<li>线性表中的元素具有相同的特性，属于同一数据对象，如：1.26 个字母的字母表: (A,B,C,D,…,Z) 2. 近期每天的平均温度：(30℃, 28℃, 29℃,…)。</li>\n</ul>\n<p><strong>线性表的抽象数据类型</strong></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121601663.png\" alt=\"image-20241224194750298\" /><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121601636.png\" alt=\"image-20241224194835091\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将所有的线性表 Lb 中但不在 La 中的数据元素插入到 La 中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token keyword\">union</span><span class=\"token punctuation\">(</span>Sqlist <span class=\"token operator\">*</span>La<span class=\"token punctuation\">,</span> Sqlist Lb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> La_len<span class=\"token punctuation\">,</span> Lb_len<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tElemType e<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 声明 La 和 Lb 相同的 数据元素 e</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tLa_len <span class=\"token operator\">=</span> <span class=\"token function\">ListLength</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>La<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 求线性表的长度</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tLb_len <span class=\"token operator\">=</span> <span class=\"token function\">ListLength</span><span class=\"token punctuation\">(</span>Lb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Lb_len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>Lb<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 取 Lb 中第 i 个数据元素赋值给 e</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">LocateElem</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>La<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//La 中不存在和 e 相同数据元素</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>La<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>La_len<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"三-线性表顺序存储结构\"><a class=\"anchor\" href=\"#三-线性表顺序存储结构\">#</a> 三、线性表顺序存储结构</h2>\n<ul>\n<li>\n<p>顺序表是线性表的顺序表示。（线性表的顺序存储称为顺序表）</p>\n</li>\n<li>\n<p>用一组地址连续的存储单元依次存储线性表的数据元素。逻辑相邻，物理也相邻。</p>\n</li>\n<li>\n<p>顺序表数据元素的位置：&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMTkyNS5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121601925.png</span>&quot; alt=&quot;image-20241224201026777&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>loc<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>loc<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>length</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>loc<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>loc<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>其中length表示元素占用的内存单元数。</pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXSIZE</span> <span class=\"token expression\"><span class=\"token number\">20</span>\t\t</span><span class=\"token comment\">// 存储空间初始分配量</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> ElemType<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//ElemType 类型根据实际情况而定，这里是 int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ElemType data<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 数组存储元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 线性表存储当前长度</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Sqlist<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>顺序表的插入操作：</strong></p>\n<ul>\n<li>\n<p>顺序表的插入操作是指在顺序表的第 i-1 个数据元素和第 i 个数据元素之间插入一个新的数据元素，即将长度为 n 的顺序表： <code>(a1,…ai-1, ai, …, an)</code>  变成长度为 n+1 的顺序表： <code>(a1,…ai-1, e, ai, …, an)</code></p>\n</li>\n<li>\n<p>在顺序表中的第 i 个位置插入一个元素，需要向后移动的元素个数为：n-i+1</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OK</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ERROR</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//Status 是函数的类型，其值是函数结果状态代码，如 OK 等</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> Status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 初始条件；顺序线性表 L 已经存在，1 &lt;= i &lt;= ListLength (L)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 操作结果：用 e 返回 L 中的第 i 个数据元素的值，注意 i 是指位置，第 i 个位置的数组从 0 开始</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Status <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>Sqlist L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> Elemtype <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">></span> L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> L<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>平均移动元素数为（假设在第 i 个元素之间插入的概率为 pi）： <code>Eis = ∑ pi x (n-i+1) 其中i从1到n+1。</code></p>\n</li>\n<li>\n<p>当插入位置等概率时 pi=1/(n+1)，因为可以插在最后面。因此： <code>Eis = ∑ [1/(n+1)] x (n-i+1) = n/2其中i从1到n+1。</code></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMTM2OS5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121601369.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom: 50%;&quot; /&gt;</p>\n</li>\n</ul>\n<p>​\t** 注意：** 顺序表插入平均移动元素数为 n/2</p>\n<ul>\n<li>\n<p>顺序表插入操作的时间复杂度为 O (n)。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始条件：顺序线性表 L 已经存在，1&lt;=i&lt;=ListLength (L)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 操作结果：在 L 中第 i 个位置之前插入新的数据元素 e，L 的长度加 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Status <span class=\"token function\">Listinsert</span><span class=\"token punctuation\">(</span>SqList <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> ElemType e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">-></span> length <span class=\"token operator\">==</span> MAXSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 顺序线性表已经满</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">></span> L <span class=\"token operator\">-></span> length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 当 i 比第一位置小或比最后一个位置的后一位置还要大时，第二种情况时已经不算是插入了</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> L <span class=\"token operator\">-></span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> L <span class=\"token operator\">-></span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">>=</span> i <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            L <span class=\"token operator\">-></span> data<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L <span class=\"token operator\">-></span> data<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    L <span class=\"token operator\">-></span> data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    L <span class=\"token operator\">-></span> length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>5. 顺序表的删除操作：</p>\n<ul>\n<li>\n<p>顺序表的删除操作是指将顺序表的第 i 个数据元素删除，即将长度为 n 的顺序表： <code>(a1,…ai-1, ai, ai+1,…, an)</code>  变成长度为 n-1 的顺序表： <code>(a1,…ai-1, ai+1, …, an)</code></p>\n</li>\n<li>\n<p>在顺序表中删除一个元素，需要向前移动元素个数为：n-i（不用加一）</p>\n</li>\n<li>\n<p>平均移动元素数为： <code>Edl = ∑ qi x (n-i) 其中i从1到n</code> 。</p>\n</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMTU3Mi5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121601572.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom: 67%;&quot; /&gt;</p>\n<ul>\n<li>当删除位置等概率时 <code>qi=1/n</code> ，因为只有 n 个元素可以删除。因此： <code>Edl = ∑ [1/n] x (n-i) = (n-1)/2其中i从1到n</code> 。</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMTI0My5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121601243.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>​\t** 注意：** 顺序表删除平均移动元素数为 (n-1)/2</p>\n<ul>\n<li>\n<p>顺序表删除操作的时间复杂度为 O (n)。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始条件：顺序线性表已经存在，1&lt;=i&lt;=ListLength (L)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 操作结果：删除 L 中的第 i 个数据元素，并用 e 返回其值，L 的长度减 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Status <span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span>SqList <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> ElemType e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 线性表为空</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">></span> L <span class=\"token operator\">-></span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 删除位置不对</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> L <span class=\"token operator\">-></span> data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 因为已经确定存在不用等删除后再返回值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> L <span class=\"token operator\">-></span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 如果删除位置不在最后位置（在最后位置时，直接长度减一即可）当然加上也没错</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> L <span class=\"token operator\">-></span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            L <span class=\"token operator\">-></span> data<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L <span class=\"token operator\">-></span> data<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将删除位置后继元素前移</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    L <span class=\"token operator\">-></span> length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>6. 顺序表的其它操作:</p>\n<ul>\n<li>\n<p>查找第 i 个位置的元素值。</p>\n</li>\n<li>\n<p>查找元素所在位置。</p>\n</li>\n<li>\n<p>得到表长。</p>\n</li>\n<li>\n<p>置空表。</p>\n</li>\n<li>\n<p>销毁表 (析构函数 <code>~SqList())。</code></p>\n</li>\n</ul>\n<p>7. 顺序表的优缺点：</p>\n<ul>\n<li>\n<p>优点：元素可以随机存取；元素位置可用一个简单、直观的公式表示并求取。通过首地址和元素序号，O (1) 内找到指定元素。存储密度高，每个结点只存储数据元素。</p>\n</li>\n<li>\n<p>缺点：在作插入或删除操作时，需要移动大量元素 。</p>\n</li>\n</ul>\n<p>** 注意：** 一个顺序表的第一个元素存储地址为 2001, 每个元素占用 4 个地址单元，第 6 个元素的存储地址为：2001+（6-1）5=2021；对于顺序存储的线性表，删除、增加结点的时间复杂度为 O (n)</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121601446.png\" alt=\"image-20241224204324791\" /></p>\n<h2 id=\"四-线性表链式存储结构\"><a class=\"anchor\" href=\"#四-线性表链式存储结构\">#</a> 四、线性表链式存储结构</h2>\n<ol>\n<li>\n<p>链表是线性表的链式存储表示。&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMTc0OC5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121601748.png</span>&quot; alt=&quot;image-20241224204604727&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n</li>\n<li>\n<p>链表中逻辑关系相邻的元素不一定在存储位置上相连，用指针表示元素之间的邻接关系。</p>\n</li>\n<li>\n<p>线性表的链式存储表示主要有三种形式：线性链表、循环链表、双向链表。</p>\n<h5 id=\"image-20241224204623887\"><a class=\"anchor\" href=\"#image-20241224204623887\">#</a> <img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121601207.png\" alt=\"image-20241224204623887\" /></h5>\n</li>\n</ol>\n<h3 id=\"单链表\"><a class=\"anchor\" href=\"#单链表\">#</a> 单链表：</h3>\n<ul>\n<li>\n<p>线性链表的元素称为结点。</p>\n</li>\n<li>\n<p>结点除包含数据元素信息的<strong>数据域</strong>外，还包含指示直接后继的<strong>指针域</strong>。</p>\n</li>\n<li>\n<p>每个结点，在需要时动态生成，在删除时释放。</p>\n</li>\n<li>\n<p>N 个结点 (ai (1≤i ≤ n) 的存储映像) 链结成一个链表，即为线性表的链式存储结构。</p>\n</li>\n<li>\n<p>链表的每个结点中只包含一个指针域，故又称线性链表或单链表。</p>\n</li>\n<li>\n<p>线性链表可由头指针惟一确定。</p>\n</li>\n<li>\n<p>以线性表中的第一个数据元素 <code>a1</code>  的存储地址作为线性表的地址，称作线性表的头指针。</p>\n</li>\n<li>\n<p>有时为了操作方变，在第一个节点之前<strong>虚加一个 &quot;头结点&quot;</strong>，以指向头结点的指针为链表的头指针，头节点可以不存储任何信息，也可以存储如线性表的长度等附加信息。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121601769.png\" alt=\"image-20241224204648148\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121601621.png\" alt=\"image-20241224205020640\" /></p>\n</li>\n<li>\n<p><code>LNode *head;</code> // 头指针</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> LNode<span class=\"token punctuation\">;</span><span class=\"token comment\">// 生成头结点  head->[|^]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//head->[ |-]->[a|-]->[b|-]->....</span></pre></td></tr></table></figure><p>** 注意：** 头结点和头指针区分：不管带不带头结点，头指针始终指向链表的第一个结点，而头结点是带头结点的链表中第一个结点，结点内通常不存储信息。增加头结点的目的是为了方便运算。<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121601079.png\" alt=\"image-20241224205124910\" /></p>\n</li>\n</ul>\n<p>头结点的优点:</p>\n<ul>\n<li>由于第一个数据结点的位置被存放在头结点的指针域中，所以在链表的第一个位置上的操作和在表的其他位置上的操作一致，无需进行特殊处理；</li>\n<li>无论链表是否为空，其头指针都指是向头结点的非空指针（空表中头结点的指针域为空）</li>\n</ul>\n<p>单链表的头指针为 head，不带头结点的判空条件：head==NULL</p>\n<p>带头结点的判空条件： <code>head-&gt;next==NULL (L -&gt;[ |^] (head-&gt;next==NULL))</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 线性表的单链表存储结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ElemType data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>LinkList<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 定义 LinkList</span></pre></td></tr></table></figure><p>（9）找第 i 个元素 <code>getelement</code> ：在线性链表中找到第 i 个元素，并返回指针；从头结点开始，顺链一步步查找；查找第 i 个数据元素的基本操作为：移动指针，比较 k 和 i（k 为当前指针所指向的结点序号）。时间复杂度为 O (n)。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始条件：链式线性表 L 已经存在，1&lt;=i&lt;=ListLength (L)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 操作结果：用 e 返回 L 中第 i 个数据元素的值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Status <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> ElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    LinkList p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    p <span class=\"token operator\">=</span> L <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        p <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p <span class=\"token operator\">||</span> j <span class=\"token operator\">></span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121601360.png\" alt=\"image-20241224210323474\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将 p 的后继节点赋值给 s 的后继</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 将 s 赋值给 p 的后继</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始条件：链式存储结构 L 已经存在，1&lt;=i&lt;=ListLength (L)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 操作结果：在 L 中的第 i 个位置之前插入新的数据元素 e,L 的长度加 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Status <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> ElemType e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    LinkList p<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>L<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t<span class=\"token comment\">// 寻找第 i 个节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        p <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p <span class=\"token operator\">||</span> j <span class=\"token operator\">></span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t<span class=\"token comment\">// 第 i 个节点不存在</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkList<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 生成新节点（C 语言标准函数）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    s <span class=\"token operator\">-></span> data <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    s <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 将 p 的后继节点赋值给 s 的后继</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 将 s 赋值给 p 的后继</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> Ok<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>（10）线性链表的插入：在线性链表的第 i-1 个元素与第 i 和元素之间插入一个新元素。s-&gt;next=p-&gt;next;p-&gt;next=s。（其中 s 为新元素）时间复杂度主要取决于 <code>getelement</code>  的时间复杂度， <code>getelement</code>  的时间复杂度为 O (n)，因此线性链表插入的时间复杂度为 O (n)。</p>\n<p>注意：在单链表中第 i 个结点之前进行插入的基本操作：找到线性表中的第 i-1 个结点 p，创建新结点 s，然后修改第 i-1 个结点和 s 结点的后继指针。s-&gt;next=p-&gt;next;p-&gt;next=s</p>\n<p>（11）线性链表的删除：将线性链表的第 i 个元素删除。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121601062.png\" alt=\"image-20241224211327884\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>q <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> q <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 将 q 的后继赋值给 p 的后继</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> next <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>找到线性表中第 i-1 个结点 p，修改其指向后继的指针。</p>\n<p>q=p-&gt;next;p-&gt;next=q-&gt;next;(e=q-&gt;data) delete q;（删除 p-&gt;next 这个结点）时间复杂度主要取决于 <code>getelement</code>  的时间复杂度， <code>getelement</code>  的时间复杂度为 O (n)，因此线性链表删除的时间复杂度为 O (n)。</p>\n<p>（12）线性链表的创建：链表是一个动态的结构，不需要预分配空间，生成链表的过程是一个结点 &quot;逐个插入&quot; 的过程。依次调用 insert 即可，时间复杂度 O (n^2)。n 个结点，每个结点每次插入 Insert 函数，头指针指向最后，表尾插入故为 n*n。</p>\n<p>（13）线性链表的创建 - 头插法：即表头不断插入新结点。逆序输入数据值。头插法时间复杂度 O (n)。</p>\n<p>（14）线性链表的创建 - 尾插法：即表尾不断插入新结点。按链表序输入数据值。为记录尾结点，增加一个尾指针 tail，指向最后一个结点。尾插法时间复杂度 O (n)</p>\n<p>（15）单链表的合并：将两个有序链表合并成一个有序链表。</p>\n<p>（16）拷贝构造函数被调用的三种情况：一个对象以值传递的方式传入函数体；一个对象以值传递的方式从函数返回；一个对象需要通过另一个对象进行初始化。</p>\n<p>（17）赋值函数被调用的时机：当一个类的对象向该类的另一个对象赋值时，就会用到该类的赋值函数。</p>\n<p>（18）拷贝构造函数与赋值函数比较：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>调用拷贝构造函数来初始化一个对象：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>A a;A b(a); A b=a;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>都是拷贝构造函数来创建对象b（b还不存在）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>调用赋值函数对对象复制：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>A a;A b;b=a;</pre></td></tr></table></figure><p>强调：这里 a,b 对象是已经存在的，是用 a 对象来赋值给 b 的！！</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始条件：链式线性表 L 已经存在，1&lt;=i&lt;=ListLength (L)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 操作结果：删除 L 的第 i 个数据元素，并用 e 返回其值，L 的长度减 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Status <span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> ElemType <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    LinkList p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>L<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">-></span> next <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 遍历寻找第 i 个数据元素的前一个元素</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        p <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">-></span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> j <span class=\"token operator\">></span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t<span class=\"token comment\">// 第 i 个数据元素不存在</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    q <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> q <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> q <span class=\"token operator\">-></span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>单链表的整表创建</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 随机产生 n 个元素的值，建立带表头节点的单链表（头插法）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CreatListHead</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    LinkList p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 初始化随机种子</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span>L <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkList<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 先建立一个带头节点的单链表</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkList<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t <span class=\"token comment\">// 生成新节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        p <span class=\"token operator\">-></span> data <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\t\t <span class=\"token comment\">// 随机生成 100 以内的数字</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        p <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span>\t\t\t <span class=\"token comment\">// 插到表头</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 随机产生 n 个元素的值，建立带表头节点的单链表 L（尾插法）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CreatListTail</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    LinkList p<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">scrand</span><span class=\"token punctuation\">(</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span>L <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkList<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    r <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>L<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//r 为指向尾部的指针</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkList<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 生成新的节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        p <span class=\"token operator\">-></span> data <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        r <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\t\t\t\t\t\t <span class=\"token comment\">// 将表尾指针指向新节点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        r <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t <span class=\"token comment\">// 将尾指针后移（更新尾指针）</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    r <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>单链表的整表删除</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始条件：链式线性表已经存在</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 操作结果：将 L 清空</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Status <span class=\"token function\">ClearList</span><span class=\"token punctuation\">(</span>LinkList <span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tLinkList p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        q <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        p <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> Ok<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121601310.png\" alt=\"image-20241224221320967\" /></p>\n<h3 id=\"静态链表线性链表也可以采用静态数组实现\"><a class=\"anchor\" href=\"#静态链表线性链表也可以采用静态数组实现\">#</a> 静态链表：线性链表也可以采用静态数组实现。</h3>\n<p><strong>我们把用数组描述的链表叫做静态链表。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXSIZE</span> <span class=\"token expression\"><span class=\"token number\">1000</span> \t\t</span><span class=\"token comment\">// 存储空间的初始分配量</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 线性表的静态表存储结构</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ElemType data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> cur<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 游标（Cursor), 为 0 时表示无指向</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Component<span class=\"token punctuation\">,</span> StaticLinkList<span class=\"token punctuation\">[</span>MIXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121601064.png\" alt=\"image-20241224221837061\" /></p>\n<blockquote>\n<p>数组第一个元素，即下标为 0 的元素的 cur 就存放备用链表的第一个节点的下标；而数组的最后一个元素的 cur 则存放第一个有数值的元素的下标，相当于单链表中头节点作用，当整个链表为空时，则为 0；</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将一维数组 space 中各分量链成一个备用链表，space [0].cur 为头指针，“0” 表示空指针 || 一开始整个链表都是备用链表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Status <span class=\"token function\">InitList</span><span class=\"token punctuation\">(</span>StaticLinkList space<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAXSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        space<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    space<span class=\"token punctuation\">[</span>MAXSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>假设现在情况如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/Arboding/picgo/main/imgimage-20241224235449383.png\" alt=\"image-20241224235449383\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始条件：若备用链表非空，则返回分配的结点下标，否则返回 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 操作结果：返回一个备用链表的下标</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> Malloc<span class=\"token operator\">-</span><span class=\"token function\">SSL</span><span class=\"token punctuation\">(</span>StaticLinkList space<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> space<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 当前数组第一个元素的 cur 村的值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \t\t\t\t\t\t\t\t<span class=\"token comment\">// 返回第一个备用空闲的下标</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>space<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t<span class=\"token comment\">// 由于要拿出一个分量来使用，所以我们就得把他的下一个分量拿出来</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        space<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur <span class=\"token operator\">=</span> space<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur<span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果 space [0].cur 为 0 则说明无备用链表了</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 静态链表插入操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 操作结果：在第 i 个元素之前插入一个数据元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Status <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>StaticLinkList L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> ElemType e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    k <span class=\"token operator\">=</span> MAXSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\t <span class=\"token comment\">//k 为最后一个元素的下标</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">></span> <span class=\"token function\">ListLength</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    j <span class=\"token operator\">=</span> <span class=\"token function\">Malloc_SSL</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 获得备用链表的下标</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        l<span class=\"token punctuation\">[</span>J<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 将数据赋值给此备用分量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> l <span class=\"token operator\">&lt;=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> l<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 找到第 i 个元素之前的位置</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            k <span class=\"token operator\">=</span> L<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur<span class=\"token punctuation\">;</span><span class=\"token comment\">// 第一次操作时先通过最后一个元素找到第一个元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        L<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur <span class=\"token operator\">=</span> L<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 把第 i 个元素的 cur 赋值给新元素的 cur，然后将新元素的下标传给第 i 个元素之前的元素</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        L<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    首先，你先获取新元素的下标</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    然后，你需要找到第i个元素之前的下标</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    然后，你的目标时在第i个元素之前插入一个新元素，其实插入的过程如链表的时候一样，首先，让新元素的游标等于现在第i<span class=\"token operator\">-</span><span class=\"token number\">1</span>个元素的游标，然后让第i<span class=\"token operator\">-</span><span class=\"token number\">1</span>个元素的游标等于新元素的游标</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121602164.png\" alt=\"image-20241225003641225\" /></p>\n<p>删除操作:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除在 L 中的第 i 个元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Status <span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span>StaticLinkList L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    k <span class=\"token operator\">=</span> MAXSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">></span> <span class=\"token function\">ListLength</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        k <span class=\"token operator\">=</span> space<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    j <span class=\"token operator\">=</span> L<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    L<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur <span class=\"token operator\">=</span> L<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Free_SSL</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 将下标为 k 的空闲结点回收到备用链表中</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Free_SSL</span><span class=\"token punctuation\">(</span>StaticLinkList space<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    space<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur <span class=\"token operator\">=</span> space<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    space<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始条件：静态链表 L 已经存在</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 操作结果：返回 L 中数据元素的个数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">ListLength</span><span class=\"token punctuation\">(</span>StaticLinkList L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> L<span class=\"token punctuation\">[</span>MAXSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        i <span class=\"token operator\">=</span> L<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">++</span>J<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>静态链表的整表的创建</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Status <span class=\"token function\">CreateList</span><span class=\"token punctuation\">(</span>StaticLinkList space<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> MAXSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token function\">Malloc_SSL</span><span class=\"token punctuation\">(</span>space<span class=\"token punctuation\">)</span>；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    space<span class=\"token punctuation\">[</span>MAXSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cin <span class=\"token operator\">>></span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    space<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    space<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    j <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        cin <span class=\"token operator\">>></span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        t <span class=\"token operator\">=</span> <span class=\"token function\">Malloc_SLSL</span><span class=\"token punctuation\">(</span>space<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        space<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        space<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur <span class=\"token operator\">=</span> space<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        space<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cur <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        j <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> Ok<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>与顺序表有两点不同：</p>\n<p>（1）每个元素包括数据域和指针域。</p>\n<p>（2）元素的逻辑关系由指针确定。</p>\n<p>与单链表的区别：</p>\n<p>（1）静态链表暂时不用结点，链成一个备用链表。</p>\n<p>（2）插入时，从备用链表中申请结点。</p>\n<p>（3）删除结点时，将结点放入备用链表。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121602518.png\" alt=\"image-20241225004841325\" /></p>\n<h3 id=\"循环链表\"><a class=\"anchor\" href=\"#循环链表\">#</a> 循环链表：</h3>\n<p>（1）循环链表是一种特别的线性链表。&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTYwMjEyNi5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121602126.png</span>&quot; alt=&quot;image-20241225141021939&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>（2）循环链表中最后一个结点的指针域指向头结点，整个链表形成一个环。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121602666.png\" alt=\"image-20241225141103951\" /></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121602457.png\" alt=\"image-20241225141142497\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p <span class=\"token operator\">=</span> rearA <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 保存 A 表的头结点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rearA <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> rearB <span class=\"token operator\">-></span> next <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将本是 B 表中的第一个结点赋值给 rearA->next</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q <span class=\"token operator\">=</span> rearB <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rearB <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将原来 A 表的头结点赋值给 rearB->next</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 释放 q</span></pre></td></tr></table></figure><p>（3）在只有尾指针的单循环链表中：</p>\n<p>表头插入结点：在只有尾指针的情况下，要在表头插入结点，首先需要找到尾结点，然后将新结点插入到尾结点之后。因此，表头插入结点的时间复杂度为 O (1)（常数时间），因为无论链表有多长，插入操作所需的时间都是相对固定的。</p>\n<p>虽然在只有尾指针的情况下，插入结点时需要找到尾结点，但这并不会导致时间复杂度变为 O (n)。在单循环链表中，尾结点指向头结点，因此我们可以直接通过尾指针找到头结点，然后在头结点之后插入新结点。</p>\n<p>因此，表头插入结点的时间复杂度仍然是 O (1)，因为无论链表有多长，插入操作所需的时间都是相对固定的。</p>\n<p>表尾插入结点：由于只有尾指针，直接在尾结点之后插入新结点即可。因此，表尾插入结点的时间复杂度同样为 O (1)。</p>\n<p>（4）查找、插入和删除：与线性链表基本一致，差别仅在于算法中的循环条件不是 p-&gt;next 或 p 是否为空（^)，而是它们是否等于头指针 (L)。</p>\n<p>注意循环链表带头结点判空：head-&gt;next==head</p>\n<p>7. 双向链表</p>\n<p>（1）双向链表是一种特殊的线性链表：每个结点有两个指针，一个指针指向直接后继 (next)，另一个指针指向直接前驱 (prior)。</p>\n<p>（2）对于任何一个中间节点有：p=p-&gt;next-&gt;prior/p=p-&gt;prior-&gt;next。</p>\n<p>（3）插入操作需要改变两个方向的指针：s-&gt;next=p;s-&gt;prior=p-&gt;prior;p-&gt;prior-&gt;next=s;p-&gt;prior=s;</p>\n<p>（4）删除操作需要改变两个方向的指针：p-&gt;prior-&gt;next=p-&gt;next;p-&gt;next-&gt;prior=p-&gt;prior;</p>\n<h3 id=\"双向循环链表\"><a class=\"anchor\" href=\"#双向循环链表\">#</a> 双向循环链表</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 线性表的双向链表存储结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DulNode</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ElemType data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DulNode</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">// 直接后继指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DulNode</span> <span class=\"token operator\">*</span>prior<span class=\"token punctuation\">;</span><span class=\"token comment\">// 直接前驱指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>DulNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>DulLinkList<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>（1）存在两个环：一个是直接后继环，另一个是直接前驱环。</p>\n<p>既然单链表有循环链表，那么双向链表也有循环链表<img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121602527.png\" alt=\"image-20241225142222668\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p <span class=\"token operator\">-></span> next <span class=\"token operator\">-></span> prior <span class=\"token operator\">=</span> p <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> prior <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>插入</strong></p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121602491.png\" alt=\"image-20241225142407305\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入的时候先确定，待加入的数据的前驱和后继</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 然后确定后面元素的前驱，最后修改前面元素的后继</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 因为我们是通过 p 确定的，所以先动 p->next->prior, 然后动 p->next</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s <span class=\"token operator\">-></span> prior <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p <span class=\"token operator\">-></span> next <span class=\"token operator\">-></span> prior <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>删除</strong><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121602277.png\" alt=\"image-20241225142843333\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p <span class=\"token operator\">-></span> prior <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 把 p->next 赋值给 p->prior 的后继</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">-></span> next <span class=\"token operator\">-></span> prior <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> prior<span class=\"token punctuation\">;</span><span class=\"token comment\">// 把 p->prior 赋值给 p->next 的前驱</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 释放结点</span></pre></td></tr></table></figure><h2 id=\"五-一元多项式\"><a class=\"anchor\" href=\"#五-一元多项式\">#</a> 五、一元多项式</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span><span class=\"token function\">pn</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> p0 <span class=\"token operator\">+</span> p1x <span class=\"token operator\">+</span> p2 x<span class=\"token operator\">^</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">+</span> pn x<span class=\"token operator\">^</span> n</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>在计算机中，可以用一个线性表来表示：P <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p0 <span class=\"token punctuation\">,</span> p1 <span class=\"token punctuation\">,</span> …，pn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2.</span><span class=\"token function\">pn</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>p1x<span class=\"token operator\">^</span>e1<span class=\"token operator\">+</span>p2x<span class=\"token operator\">^</span>e2<span class=\"token operator\">+</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">+</span>pmx<span class=\"token operator\">^</span>em</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>线性表示<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span>e1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span>e2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>pm<span class=\"token punctuation\">,</span>em<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"六-顺序表与链表的比较\"><a class=\"anchor\" href=\"#六-顺序表与链表的比较\">#</a> 六、顺序表与链表的比较</h2>\n<ol>\n<li>基于空间的比较</li>\n</ol>\n<ul>\n<li>\n<p>存储分配的方式：顺序表的存储空间是静态分配的，链表的存储空间是动态分配的。</p>\n</li>\n<li>\n<p>存储密度 = 结点数据本身所占的存储量 / 结点结构所占的存储总量</p>\n</li>\n</ul>\n<p>​\t顺序表的存储密度 = 1，链表的存储密度 &lt; 1</p>\n<ol start=\"2\">\n<li>基于时间的比较</li>\n</ol>\n<ul>\n<li>\n<p>存取方式：顺序表可以随机存取也可以顺序存取，链表必须顺序存取。</p>\n</li>\n<li>\n<p>插入、删除时移动元素个数：顺序表平均需要移动近一半元素，链表不需要移动元素只需要修改指针。</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>基于应用的比较</li>\n</ol>\n<ul>\n<li>\n<p>线性表主要是存储大量数据，并用于查找时，采用顺序表比较好。</p>\n</li>\n<li>\n<p>若线性表存储的数据元素要经常插入和删除，采用链表比较好。</p>\n</li>\n</ul>\n<p>** 注意：** 某线性表中最常用的操作是在最后一个元素之后插入一个元素和删除第一个元素，则采用带尾指针的单循环链表最节省时间。</p>\n<p>仅有尾指针的单循环链表，可以非常方便地找到尾结点，尾结点后面的第一个结点往往是头结点，头结点的下一个结点就是线性表的第一个结点。对最后一个元素和第一个元素操作对带尾指针的单循环链表是非常方便的</p>\n<p>循环链表是线性表，它是线性表的链表存储结构之一。</p>\n<p>在一个以 h 为头的单循环链表中，p 指针指向链尾的条件是 p-&gt;next=h。</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>线性表：线性表是零个或多个具有相同类型的相互据元素的有限序列。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121602504.png\" alt=\"image-20241225143325916\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d5ZW9saGFkYS9hcnRpY2xlL2RldGFpbHMvMTM1NTEzNDg3\">参考链接</span></p>\n<p><strong>双向的 <code>STL容器</code> </strong></p>\n<p>序列容器：队列 <code>deque</code> , 链表 <code>list</code></p>\n<p>单向的 <code>STL容器</code></p>\n<p>序列容器：数组 <code>vector</code></p>\n<p>容器适配器：优先队列 <code>priority_queue</code> ,  <code>queue</code> ,  <code>stack</code></p>\n",
            "tags": [
                "计算机",
                "数据结构",
                "概念",
                "第2章",
                "数据结构"
            ]
        },
        {
            "id": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/%E7%AC%AC1%E7%AB%A0/2.%E7%AE%97%E6%B3%95/",
            "url": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/%E7%AC%AC1%E7%AB%A0/2.%E7%AE%97%E6%B3%95/",
            "title": "2.算法",
            "date_published": "2025-01-12T07:51:01.811Z",
            "content_html": "<h2 id=\"一-算法\"><a class=\"anchor\" href=\"#一-算法\">#</a> 一、算法</h2>\n<p><strong>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每个指令表示一个或多个操作。</strong></p>\n<ol>\n<li>\n<p>算法是对特定问题求解步骤的一种描述。</p>\n</li>\n<li>\n<p>算法是一有限长的操作序列。</p>\n</li>\n<li>\n<p>算法特性（5 个）：&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTU1MjQwNi5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121552406.png</span>&quot; alt=&quot;image-20241224190819050&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>有穷性：算法在执行有穷步后能结束。</p>\n</li>\n<li>\n<p>确定性：每步定义都是确切、无歧义，无二义性，相同输入相同输出。</p>\n</li>\n<li>\n<p>可行性：每一条运算都能通过执行有限次数完成。</p>\n</li>\n<li>\n<p>输入：有 0 个或多个输入。</p>\n</li>\n<li>\n<p>输出：有 1 个或多个输出。</p>\n</li>\n</ul>\n<p>4. 算法设计要求（目标）：</p>\n<p>（1）正确性：满足具体题目的需求，至少应该具备输入，输出和加工处理无歧义性，能正确反应问题的需求，能够得到正确答案。</p>\n<p>（2）可读性：便于理解和修改。</p>\n<p>（3）健壮性：当输入数据非法时，也能适当反应，而不是产生异常或莫名奇妙的结果。</p>\n<p>（4）效率高：执行时间少。</p>\n<p>（5）空间省：执行中需要的最大存储空间少。</p>\n<h2 id=\"二-时间复杂度\"><a class=\"anchor\" href=\"#二-时间复杂度\">#</a> 二、时间复杂度</h2>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121552407.png\" alt=\"image-20241224192340440\" /></p>\n<p>第一条当然是算法好坏的根本，第二条主要有软件来支持，第四条要看硬件性能。也就是说，抛开这些与计算机硬件，软件有关的因素，一 ** 个程序的运行时间，依赖于算法的好坏和问题的输入规模。** 所谓问题输入规模是指输入量的多少。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121552408.png\" alt=\"image-20241224193054367\" /></p>\n<ol>\n<li>算法效率的度量是通过时间复杂度和空间复杂度来描述的。</li>\n</ol>\n<p>衡量算法的效率，主要依据算法执行所需要的时间，即时间复杂度。</p>\n<p>注意：算法分析的目的：分析算法的效率以求改进。</p>\n<ol start=\"2\">\n<li>事后统计法：计算算法开始时间与完成时间差值。</li>\n</ol>\n<p>缺点：（必须执行程序；其它因素遮盖算法本质）</p>\n<ol start=\"3\">\n<li>\n<p>事前统计法：依据算法选用何种策略及问题的规模 n，是常用的方法。</p>\n</li>\n<li>\n<p>（事前统计法）和算法执行时间相关的因素：</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121552409.png\" alt=\"image-20241224193717540\" /></p>\n</li>\n</ol>\n<p>（1）算法选用的策略（主要）</p>\n<p>（2）问题的规模（主要）</p>\n<p>（3）编写的语言</p>\n<p>（4）编译程序产生的机器代码的质量</p>\n<p>（5）计算机执行指令的速度</p>\n<ol start=\"5\">\n<li>一般情况下，算法中基本操作重复执行的次数是问题规模 n 的某个函数，算法的时间量度记作 T (n)=O (f (n))，称作算法的渐近时间复杂度，简称时间复杂度。它表示随问题规模 n 的增大，算法执行时间的增长率和 f (n) 的增长率相同。</li>\n</ol>\n<blockquote>\n<p>（1）加法规则： <code>T(n)=T1(n)+T2(n)=O(f(n))+O(g(n))=O(max(f(n),g(n)))</code></p>\n<p>（2）乘法规则： <code>T(n)=T1(n)*T2(n)=O(f(n)) * O(g(n))=O(f(n)*g(n))</code></p>\n</blockquote>\n<ol start=\"6\">\n<li>\n<p>时间复杂度除常量阶 [O (1)], 线性阶 [O (n)], 平方阶 [O (n<sup>2)] 外，还有对数阶 `[O (logn)]`，排列阶 [O (n!)]，指数阶 [O (2</sup>n)] 等，是相对于问题规模 n 的增长率的表示方法。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121552410.png\" alt=\"image-20241224193820311\" /></p>\n</li>\n</ol>\n<blockquote>\n<p>（1）多项式： <code>O(1)&lt;O(log2(n))&lt;O(n)&lt;O(nlog2(n))&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)</code></p>\n<p>（2）指数时间： <code>O(2^n)&lt;O(n!)&lt;O(n^n)</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">)</span>i<span class=\"token operator\">=</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 令执行 x 次，2^x=n，x=log2 (n)，即时间复杂度为 O (log2 (n))</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 递归算法，时间复杂度是 O (n)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">int</span> <span class=\"token function\">rec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>                 </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span><span class=\"token function\">rec</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>如果算法的执行有多种可能的操作顺序，则<strong>求其平均时间复杂度</strong>。</li>\n</ol>\n<p>如果无法求取平均时间复杂度，则采用最坏情况下的时间复杂度。</p>\n<p>时间复杂度是衡量算法好坏的一个最重要的标准。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> bubble<span class=\"token operator\">-</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>，<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>change<span class=\"token operator\">=</span>TURE<span class=\"token punctuation\">;</span>i<span class=\"token operator\">></span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> change<span class=\"token punctuation\">;</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           change<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>           <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>i<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                     a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> ←→a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    change<span class=\"token operator\">=</span>TURE<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span>     </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 最好情况：0 次（全部升序排列）</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 最坏情况：n*(n-1)/2 次（全部降序排列）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//5 4 3 2 1（5 要比较（n-1）次，1 被移到最前面了，比较 0 次，共有 n 个元素，使用求和公式 0+1+...+(n-1)=n*(n-1+0)/2</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 平均时间复杂度：O (n^2)</span></pre></td></tr></table></figure><p>判断一个算法的效率时，<strong>函数中的常数和其他次要项常常可以忽略</strong>，而更应该关注主项（最高阶项）的阶数</p>\n<h2 id=\"三-空间复杂度\"><a class=\"anchor\" href=\"#三-空间复杂度\">#</a> 三、空间复杂度</h2>\n<ol>\n<li>\n<p>空间复杂度指算法执行时，所需要存储空间的量度，它也是问题规模的函数，即：S (n) = O (f (n))。</p>\n</li>\n<li>\n<p>算法的存储量包括：</p>\n</li>\n</ol>\n<p>（1）程序本身所占空间（与算法无关）</p>\n<p>（2）输入数据所占空间（与算法无关）</p>\n<p>（3）辅助变量所占空间（若所需额外空间相对于输入数据量来说是常数，则称此算法为原地工作。否则，按最坏情况分析）</p>\n<p>注意：只有辅助变量所占空间与算法有关</p>\n<h2 id=\"总结回顾\"><a class=\"anchor\" href=\"#总结回顾\">#</a> 总结回顾</h2>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121552411.png\" alt=\"image-20241224194303283\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d5ZW9saGFkYS9hcnRpY2xlL2RldGFpbHMvMTM1NTEzNDg3\">原文链接</span></p>\n",
            "tags": [
                "计算机",
                "数据结构",
                "概念",
                "第1章",
                "数据结构"
            ]
        },
        {
            "id": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/%E7%AC%AC1%E7%AB%A0/1.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E6%9C%AF%E8%AF%AD/",
            "url": "https://arboding.github.io/2025/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E5%BF%B5/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/%E7%AC%AC1%E7%AB%A0/1.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E6%9C%AF%E8%AF%AD/",
            "title": "1.基本概念及术语",
            "date_published": "2025-01-12T07:51:01.809Z",
            "content_html": "<h2 id=\"一-数据\"><a class=\"anchor\" href=\"#一-数据\">#</a> 一、数据</h2>\n<p>1.<strong> 数据</strong>是信息的载体，是描述客观事物的数、字符、以及所有能输入到计算机中，被计算机程序识别和处理的符号的集合。</p>\n<p>2. 数据分为：数值性数据和非数值性数据。</p>\n<h2 id=\"二-数据元素\"><a class=\"anchor\" href=\"#二-数据元素\">#</a> 二、数据元素</h2>\n<p>1.<strong> 数据元素</strong>是数据的基本单位，是数据集合的个体。</p>\n<p>2. 一个数据元素可以由若干数据项组成（此时数据元素被称为记录）。</p>\n<p>3. 数据元素又称为元素、结点、记录。</p>\n<h2 id=\"三-数据项\"><a class=\"anchor\" href=\"#三-数据项\">#</a> 三、数据项</h2>\n<p>1. 数据项是具有独立含义的<strong>最小标识单位</strong>。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTU1MTg4OS5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121551889.png</span>&quot; alt=&quot;image-20241224185059088&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>2. 数据项是数据的最小单位。</p>\n<h2 id=\"四-数据对象\"><a class=\"anchor\" href=\"#四-数据对象\">#</a> 四、数据对象</h2>\n<p><strong>1. 数据对象是具有相同性质的数据元素的集合，是数据的一个子集。</strong></p>\n<p>（整数数据对象，字母字符数据对象）</p>\n<h2 id=\"五-结构\"><a class=\"anchor\" href=\"#五-结构\">#</a> 五、结构</h2>\n<p>1. 结构是元素之间的。</p>\n<p>2. 结构包含空间位置关系，相互作用和依赖关系。</p>\n<p>3. 四种基本结构：<strong>集合结构</strong>、<strong>线性结构</strong>、<strong>树形结构</strong>、<strong>图形结构</strong>。</p>\n<ul>\n<li>\n<p>集合结构：结构中的数据元素之间除 “同属一个集合” 外，别无其他关系。</p>\n</li>\n<li>\n<p>线性结构：数据元素一对一关系。</p>\n</li>\n<li>\n<p>树形结构：一对多。</p>\n</li>\n<li>\n<p>图形结构：多对多。</p>\n</li>\n<li>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121551890.png\" alt=\"image-20241224161314216\" /></p>\n</li>\n</ul>\n<h2 id=\"六-数据结构\"><a class=\"anchor\" href=\"#六-数据结构\">#</a> 六、数据结构</h2>\n<p>1. 形式定义：某一数据对象的所有数据成员之间的关系。记为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Data_Structure<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>D<span class=\"token punctuation\">,</span>S<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中，D 是某一数据对象，即数据元素的有限集合，S 是该对象中所有数据成员之间的关系的有限集合。</p>\n<p>2.<strong> 数据结构是相互之间存在一种或多种特点关系的数据元素的集合</strong>。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121551891.png\" alt=\"image-20241224185415766\" /></p>\n<p>3. 数据结构包含三方面的内容：<strong>逻辑结构</strong>，<strong>存储结构</strong>和<strong>数据的运算</strong>。</p>\n<p>1. 集合数据结构：L={K,R}（其中 K 为点集，R 为关系 &lt;&gt;）&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTU1MTg5Mi5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121551892.png</span>&quot; alt=&quot;image-20241224185539103&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>2. 线性数据结构：L={K,R}（其中 K 为点集，R 为关系 &lt;&gt;）&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTU1MTg5My5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121551893.png</span>&quot; alt=&quot;image-20241224185557838&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>3. 树形数据结构：T={K,R}（其中 K 为点集，R 为关系 &lt;&gt;）&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTU1MTg5NC5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121551894.png</span>&quot; alt=&quot;image-20241224185617164&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>4. 图形数据结构：G={K,R}（其中 K 为点集，R 为关系 () ）&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTU1MTg5NS5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121551895.png</span>&quot; alt=&quot;image-20241224185629941&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<h2 id=\"七-数据结构要解决的问题\"><a class=\"anchor\" href=\"#七-数据结构要解决的问题\">#</a> 七、数据结构要解决的问题</h2>\n<p>1. 从广义上讲，数据结构描述现实世界实体的数学模型及其上的操作在计算机中的表示和实现。</p>\n<h2 id=\"八-逻辑结构\"><a class=\"anchor\" href=\"#八-逻辑结构\">#</a> 八、逻辑结构</h2>\n<p>1. 逻辑结构描述数据元素之间的关系。</p>\n<p>2. 逻辑结构包括<strong>线性结构和非线性结构</strong>。</p>\n<p>（1）线性结构包括线性表（表、栈、队列、串）。栈、队列、串是受限线性表。</p>\n<p>（2）非线性结构包括树（二叉树、赫夫曼树、二叉排序树）和图（有向图、无向图）。</p>\n<h2 id=\"九-物理结构存储结构\"><a class=\"anchor\" href=\"#九-物理结构存储结构\">#</a> 九、物理结构（存储结构）</h2>\n<p>1. 物理结构是<strong>数据结构在计算机中的表示</strong>（或映像）。（存储结构是逻辑结构在计算机中的存储映像，包括数据元素映像和关系映像，但是逻辑结构是独立于存储结构的。）</p>\n<p>2. 物理结构包括：顺序存储表示、非顺序存储（链式存储表示、索引存储表示、散列存储表示）。</p>\n<blockquote>\n<p><strong>注意：有序表属于逻辑结构；顺序表、哈希表、单链表属于存储结构</strong></p>\n</blockquote>\n<p>(1)<strong> 顺序存储</strong>：逻辑上相邻的元素，存储的物理位置也相邻。优点：随机存取，每个元素占用最少的存储空间；缺点：只能使用相邻的一整块存储单元，可能产生较多的外部碎片。</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121551896.png\" alt=\"image-20241224185709897\" /></p>\n<p>(2)<strong> 链式存储</strong>：不要求逻辑上相邻的元素，存储的物理位置也相邻。借助指针表示元素之间的逻辑关系。优点：不会出现碎片现象，充分利用所有存储单元；缺点：每个元素因存储指针占用额外的存储空间，且只能实现顺序存取。&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTU1MTg5Ny5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121551897.png</span>&quot; alt=&quot;image-20241224185727865&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>(3) 索引存储：建立附加索引表。优点：检索速度快；缺点：附加的索引表占内存，增加和删除数据也会修改索引表，花费较多时间。</p>\n<p>(4) 散列存储：根据关键字直接计算存储地址。优点：检索、删除、增加都很快；缺点：会发生冲突，花费时间。</p>\n<h2 id=\"十-数据类型\"><a class=\"anchor\" href=\"#十-数据类型\">#</a> 十、数据类型</h2>\n<p>1. 数据类型是一个值的集合和定义在这个值集上的一组操作的总称。</p>\n<p>（如 int 整型变量，其值集为某个区间上的整数，定义在其上的操作为 +、-、x、/ 等)</p>\n<p>2. 原子数据类型是不可分解的数据类型（如 int、float、char、* 等等）。&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTU1MTg5OC5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121551898.png</span>&quot; alt=&quot;image-20241224185846086&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>3. 结构数据类型 &lt; img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZ29vZF9nbG9yeS9waWNnby9yYXcvbWFzdGVyLzIwMjUwMTEyMTU1MTg5OS5wbmc=\">https://gitee.com/good_glory/picgo/raw/master/202501121551899.png</span>&quot; alt=&quot;image-20241224185919234&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>（1）由若干成分（原子类型或结构类型）按照某种结构组成的数据类型）</p>\n<p>（2）结构数据类型可以看做是一种数据结构和定义在其上的一组操作组成的整体。</p>\n<p>（3）如数组，由若干个分量组成，每个分量可以是整数，也可以是数组（int A [10]）。</p>\n<p>4. 抽象数据类型</p>\n<ul>\n<li>\n<p>由用户定义，用以表示应用问题的数据模型。</p>\n</li>\n<li>\n<p>由基本的数据类型组成，并包括一组相关的操作。</p>\n</li>\n<li>\n<p>信息隐蔽和数据封装，使用与现实相分离。</p>\n</li>\n<li>\n<p>抽象数据类型 ADT 是一个数学模型以及定义在该模型上的一组操作。</p>\n</li>\n<li>\n<p>抽象数据类型 = 数据结构 + 定义在此数据结构上的一组操作。</p>\n</li>\n<li>\n<p>（D，S，P）三元组表示。（D 是数据对象，S 是 D 上的关系集，P 是对 D 的基本操作集）</p>\n</li>\n<li>\n<p>ADT 定义：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ADT 抽象数据类型名<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>数据对象：<span class=\"token operator\">&lt;</span>数据对象的定义<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>数据关系：<span class=\"token operator\">&lt;</span>数据关系的定义<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>基本操作：<span class=\"token operator\">&lt;</span>基本操作（函数）的定义<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span>ADT 抽象数据类型名</pre></td></tr></table></figure><p>例子：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ADT Triplet &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>数据对象：D <span class=\"token operator\">=</span> &#123;e1<span class=\"token punctuation\">,</span>e2<span class=\"token punctuation\">,</span>e3 <span class=\"token operator\">|</span> e1<span class=\"token punctuation\">,</span>e2<span class=\"token punctuation\">,</span>e3∈ElemSet&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>数据关系：R <span class=\"token operator\">=</span> &#123;<span class=\"token operator\">&lt;</span>e1<span class=\"token punctuation\">,</span>e2<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>e2<span class=\"token punctuation\">,</span>e3<span class=\"token operator\">></span>&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>基本操作：<span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span>                           </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>初始条件：三元组T已存在。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>操作结果：用e返回T的<span class=\"token number\">3</span>个元素中的最大值。　　</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>　　　　 <span class=\"token function\">Min</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>初始条件：三元组T已存在。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>操作结果：用e返回T的<span class=\"token number\">3</span>个元素中的最小值。　</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#125; ADT Triplet</pre></td></tr></table></figure><ul>\n<li>抽象数据类型可以通过固有的数据类型来实现：</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>抽象数据类型：类class</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>数据对象：数据成员</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>基本操作：成员函数（方法）</pre></td></tr></table></figure><h2 id=\"总结回顾\"><a class=\"anchor\" href=\"#总结回顾\">#</a> 总结回顾</h2>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121551900.png\" alt=\"image-20241224190218940\" /></p>\n<p>** 数据结构：** 相互之间存在一种或多种特定关系的数据元素的集合</p>\n<p><img data-src=\"https://gitee.com/good_glory/picgo/raw/master/202501121551901.png\" alt=\"image-20241224190341626\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d5ZW9saGFkYS9hcnRpY2xlL2RldGFpbHMvMTM1NTEzNDg3\">原文链接</span></p>\n",
            "tags": [
                "计算机",
                "数据结构",
                "概念",
                "第1章",
                "数据结构"
            ]
        },
        {
            "id": "https://arboding.github.io/2025/01/12/tool/hexo/hexo/",
            "url": "https://arboding.github.io/2025/01/12/tool/hexo/hexo/",
            "title": "hexo的使用",
            "date_published": "2025-01-11T19:27:52.766Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "tool",
                "hexo",
                "hexo"
            ]
        }
    ]
}